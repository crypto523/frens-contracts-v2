{
  "address": "0xb81Eee3ab5ecD4bba61d428269EBc7128cD88846",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFrensStorage",
          "name": "frensStorage_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Create",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_validatorLocked",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf92e4e1304d85f62d1bbef024806b8adf79948fee77749f316c10ab80c2f8063",
  "receipt": {
    "to": null,
    "from": "0x6C55105954b7fd0c4Bf3df00dFD739fA71e2fD20",
    "contractAddress": "0xb81Eee3ab5ecD4bba61d428269EBc7128cD88846",
    "transactionIndex": 7,
    "gasUsed": "2851809",
    "logsBloom": "0x
    "blockHash": "0x056c5ee7dce19c5fd80cf4f62ad080bd6fcc248ac4a7cd1e4c8918ed10789929",
    "transactionHash": "0xf92e4e1304d85f62d1bbef024806b8adf79948fee77749f316c10ab80c2f8063",
    "logs": [],
    "blockNumber": 823223,
    "cumulativeGasUsed": "18083186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5ABbB94D1305E1cD73A1f976b54b548fBAE6f401"
  ],
  "solcInputHash": "ad64651b77e21789895b311b0182d90a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFrensStorage\",\"name\":\"frensStorage_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_validatorLocked\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(address,bool)\":{\"details\":\"creates a new pool\",\"returns\":{\"_0\":\"address of new pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPoolFactory.sol\":\"StakingPoolFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\",\"keccak256\":\"0xf0f689f041c9970ece22ba42dc66cacf2aee78699e1eab26658becb738322356\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n///@title Frens Staking Pool Contract\\n///@author 0xWildhare and the FRENS team\\n///@dev A new instance of this contract is created everytime a user makes a new pool\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensOracle.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\n\\ncontract StakingPool is IStakingPool, Ownable{\\n    event Stake(address depositContractAddress, address caller);\\n    event DepositToPool(uint amount, address depositer, uint id);\\n    event AddToDeposit(uint id, uint ammount);\\n    event SetPubKey(\\n        bytes _pubKey,\\n        bytes _withdrawal_credentials,\\n        bytes _signature,\\n        bytes32 _deposit_data_root\\n    );\\n    event Withdraw(uint id, uint amount, address recipient);\\n    event Claim(uint id, uint amount, address recipient);\\n\\n\\n    modifier noZeroValueTxn() {\\n        require(msg.value > 0, \\\"must deposit ether\\\");\\n        _;\\n    }\\n\\n    modifier maxTotDep() {\\n        require(\\n            msg.value + totalDeposits <= 32 ether,\\n            \\\"total deposits cannot be more than 32 Eth\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier mustBeAccepting() {\\n        require(\\n            currentState == PoolState.acceptingDeposits,\\n            \\\"not accepting deposits\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier correctPoolOnly(uint _id) {\\n        require(\\n            frensPoolShare.poolByIds(_id) == address(this),\\n            \\\"wrong staking pool for id\\\"\\n        );\\n        _;\\n    }\\n\\n    enum PoolState {\\n        awaitingValidatorInfo,\\n        acceptingDeposits,\\n        staked,\\n        exited\\n    }\\n    PoolState public currentState;\\n    \\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    struct RageQuit {\\n        uint price;\\n        uint time;\\n        bool rageQuitting;\\n    }\\n\\n    //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\\n    mapping(uint => uint) public depositForId;\\n    //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\\n    mapping(uint => uint) public frenPastClaim;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    mapping(uint => RageQuit) public rageQuitInfo;\\n\\n    //total eth deposited to pool by users (does not include attestation or block rewards)\\n    uint public totalDeposits;\\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\\n    uint public totalClaims;\\n    //these are the ids which have deposits in this pool\\n    uint[] public idsInPool;\\n    //fee % for protocol (extracted when claiming rewards from un-exited pool)\\n    uint public feePercent;\\n\\n    //this is set in the constructor and requires the validator public key and other validator info be set before deposits can be made\\n    //also, if the validator is locked, once set, the pool owner cnnot change the validator pubkey and other info\\n    bool public validatorLocked;\\n    //this is unused in this version of the system\\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\\n    bool public transferLocked;\\n    //set as true once the validator info has been set for the pool\\n    bool public validatorSet;\\n\\n    //validator public key for pool\\n    bytes public pubKey;\\n    //validator withdrawal credentials - must be set to pool address\\n    bytes public withdrawal_credentials;\\n    //bls signature for validator\\n    bytes public signature;\\n    //deposit data root for validator\\n    bytes32 public deposit_data_root;\\n\\n    //feeRecipient address will be the FRENS multisig until there is a dao\\n    address public feeRecipient;\\n\\n    IFrensPoolShare public frensPoolShare;\\n    IFrensArt public artForPool;\\n    IFrensStorage public frensStorage;\\n    IDepositContract public depositContract;\\n\\n    /**@dev when the pool is deploied by the factory, the owner, art contract, \\n    *storage contract, and if the validator is locked are all set. \\n    *The pool state is set according to whether or not the validator is locked.\\n    */\\n    constructor(\\n        address owner_,\\n        bool validatorLocked_,\\n        IFrensStorage frensStorage_\\n    ) {\\n        require(owner_ != address(0), \\\"FRENS contract error no owner address set\\\");\\n        require(address(frensStorage_) != address(0), \\\"FRENS contract error no storage address set\\\");\\n        frensStorage = frensStorage_;\\n        address artAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensArt\\\")));\\n        require(artAddress != address(0), \\\"FRENS contract error no art address set\\\");\\n        artForPool = IFrensArt(artAddress);\\n        address frensPoolShareAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\")));\\n        require(artAddress != address(0), \\\"FRENS contract error no pool share address set\\\");\\n        frensPoolShare = IFrensPoolShare(frensPoolShareAddress);\\n        address depositContractAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"DepositContract\\\")));\\n        require(depositContractAddress != address(0), \\\"FRENS contract error no Deposit contract set\\\");\\n        depositContract = IDepositContract(depositContractAddress);\\n        feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\\\"protocol.fee.percent\\\")));\\n        require(feePercent <= 10, \\\"FRENS contract error fee too high\\\");\\n        feeRecipient = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"protocol.fee.recipient\\\")));\\n        require(feeRecipient != address(0), \\\"FRENS contract error no fee recipient set\\\");\\n        validatorLocked = validatorLocked_;\\n        if (validatorLocked) {\\n            currentState = PoolState.awaitingValidatorInfo;\\n        } else {\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        \\n        address ssvTokenAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVToken\\\")));\\n        require(ssvTokenAddress != address(0), \\\"FRENS contract error no SSV token contract set\\\");        \\n        address ssvNetwork = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVNetwork\\\")));\\n        require(ssvNetwork != address(0), \\\"FRENS contract error no SSV network contract address set\\\");        \\n        IERC20(ssvTokenAddress).approve(ssvNetwork,type(uint256).max);\\n\\n        _transferOwnership(owner_);\\n    }\\n\\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\\n    ///@dev recieves funds and returns FrenspoolShare NFT\\n    function depositToPool()\\n        external\\n        payable\\n        noZeroValueTxn\\n        mustBeAccepting\\n        maxTotDep\\n    {\\n        uint id = frensPoolShare.totalSupply();\\n        depositForId[id] = msg.value;\\n        totalDeposits += msg.value;\\n        idsInPool.push(id);\\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\\n        locked[id] = transferLocked;\\n        frensPoolShare.mint(msg.sender); //mint nft\\n        emit DepositToPool(msg.value, msg.sender, id);\\n    }\\n\\n    ///@notice allows a user to add funds to an existing NFT ID\\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\\n    function addToDeposit(uint _id) external payable mustBeAccepting maxTotDep correctPoolOnly(_id){\\n        require(frensPoolShare.exists(_id), \\\"id does not exist\\\"); //id must exist\\n        depositForId[_id] += msg.value;\\n        totalDeposits += msg.value;\\n        emit AddToDeposit(_id, msg.value);\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract, accepts validator info\\n    function stake(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        //if validator info has previously been entered, check that it is the same, then stake\\n        if (validatorSet) {\\n            require(keccak256(_pubKey) == keccak256(pubKey), \\\"pubKey mismatch\\\");\\n        } else {\\n            //if validator info has not previously been entered, enter it, then stake\\n            _setPubKey(\\n                _pubKey,\\n                _withdrawal_credentials,\\n                _signature,\\n                _deposit_data_root\\n            );\\n        }\\n        _stake();\\n    }\\n\\n    ///@dev stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\\n    function stake() external onlyOwner {\\n        _stake();\\n    }\\n\\n    function _stake() internal {\\n        require(address(this).balance >= 32 ether, \\\"not enough eth\\\");\\n        require(totalDeposits == 32 ether, \\\"not enough deposits\\\");\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        require(validatorSet, \\\"validator not set\\\");\\n        currentState = PoolState.staked;\\n        depositContract.deposit{value: 32 ether}(\\n            pubKey,\\n            withdrawal_credentials,\\n            signature,\\n            deposit_data_root\\n        );\\n        emit Stake(address(depositContract), msg.sender);\\n    }\\n\\n    ///@dev sets the validator info required when depositing to the deposit contract\\n    function setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) external onlyOwner {\\n        _setPubKey(\\n            _pubKey,\\n            _withdrawal_credentials,\\n            _signature,\\n            _deposit_data_root\\n        );\\n    }\\n\\n    function _setPubKey(\\n        bytes calldata _pubKey,\\n        bytes calldata _withdrawal_credentials,\\n        bytes calldata _signature,\\n        bytes32 _deposit_data_root\\n    ) internal {\\n        //get expected withdrawal_credentials based on contract address\\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\\n        //compare expected withdrawal_credentials to provided\\n        require(\\n            keccak256(_withdrawal_credentials) ==\\n                keccak256(withdrawalCredFromAddr),\\n            \\\"withdrawal credential mismatch\\\"\\n        );\\n        if (validatorLocked) {\\n            require(currentState == PoolState.awaitingValidatorInfo, \\\"wrong state\\\");\\n            assert(!validatorSet); //this should never fail\\n            currentState = PoolState.acceptingDeposits;\\n        }\\n        require(currentState == PoolState.acceptingDeposits, \\\"wrong state\\\");\\n        pubKey = _pubKey;\\n        withdrawal_credentials = _withdrawal_credentials;\\n        signature = _signature;\\n        deposit_data_root = _deposit_data_root;\\n        validatorSet = true;\\n        emit SetPubKey(_pubKey, _withdrawal_credentials, _signature, _deposit_data_root);\\n    }\\n\\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\\n    function withdraw(uint _id, uint _amount) external mustBeAccepting {\\n        require(msg.sender == frensPoolShare.ownerOf(_id), \\\"not the owner\\\");\\n        require(depositForId[_id] >= _amount, \\\"not enough deposited\\\");\\n        depositForId[_id] -= _amount;\\n        totalDeposits -= _amount;\\n        (bool success, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: _amount}(\\\"\\\");\\n        assert(success);\\n        emit Withdraw(_id, _amount, msg.sender);\\n    }\\n\\n    ///@notice allows user to claim their portion of the rewards\\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\\n    function claim(uint _id) external correctPoolOnly(_id){\\n        require(\\n            currentState != PoolState.acceptingDeposits,\\n            \\\"use withdraw when not staked\\\"\\n        );\\n        require(\\n            address(this).balance > 100,\\n            \\\"must be greater than 100 wei to claim\\\"\\n        );\\n        //has the validator exited?\\n        bool exited;\\n        if (currentState != PoolState.exited) {\\n            IFrensOracle frensOracle = IFrensOracle(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensOracle\\\"))));\\n            exited = frensOracle.checkValidatorState(address(this));\\n            if (exited && currentState == PoolState.staked ){\\n                currentState = PoolState.exited;\\n            }\\n        } else exited = true;\\n        //get share for id\\n        uint amount = _getShare(_id);\\n        //claim\\n        frenPastClaim[_id] += amount;\\n        totalClaims += amount;\\n        //fee? not applied to exited\\n        if (feePercent > 0 && !exited) {\\n            uint feeAmount = (feePercent * amount) / 100;\\n            if (feeAmount > 1){ \\n                (bool success1, /*return data*/) = feeRecipient.call{value: feeAmount - 1}(\\\"\\\"); //-1 wei to avoid rounding error issues\\n                assert(success1);\\n            }\\n            amount = amount - feeAmount;\\n        }\\n        address recipient = frensPoolShare.ownerOf(_id);\\n        (bool success2, /*return data*/) = payable(recipient).call{value: amount}(\\\"\\\");\\n        assert(success2);\\n        emit Claim(_id, amount, recipient);\\n    }\\n\\n    //getters\\n\\n    function getIdsInThisPool() external view returns(uint[] memory) {\\n      return idsInPool;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id`\\n    function getShare(uint _id) external view correctPoolOnly(_id) returns (uint) {\\n        return _getShare(_id);\\n    }\\n\\n    function _getShare(uint _id) internal view returns (uint) {\\n        if (address(this).balance == 0) return 0;\\n        uint frenDep = depositForId[_id];\\n        uint frenPastClaims = frenPastClaim[_id];\\n        uint totFrenRewards = ((frenDep * (address(this).balance + totalClaims)) / totalDeposits);\\n        if (totFrenRewards == 0) return 0;\\n        uint amount = totFrenRewards - frenPastClaims;\\n        return amount;\\n    }\\n\\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\\n    ///@dev this is used for the traits in the NFT\\n    function getDistributableShare(uint _id) external view returns (uint) {\\n        if (currentState == PoolState.acceptingDeposits) {\\n            return 0;\\n        } else {\\n            uint share = _getShare(_id);\\n            if (feePercent > 0 && currentState != PoolState.exited) {\\n                uint feeAmount = (feePercent * share) / 100;\\n                share = share - feeAmount;\\n            }\\n            return share;\\n        }\\n    }\\n\\n    ///@return pool state\\n    function getState() external view returns (string memory) {\\n        if (currentState == PoolState.awaitingValidatorInfo)\\n            return \\\"awaiting validator info\\\";\\n        if (currentState == PoolState.staked) return \\\"staked\\\";\\n        if (currentState == PoolState.acceptingDeposits)\\n            return \\\"accepting deposits\\\";\\n        if (currentState == PoolState.exited) return \\\"exited\\\";\\n        return \\\"state failure\\\"; //should never happen\\n    }\\n\\n    function owner()\\n        public\\n        view\\n        override(IStakingPool, Ownable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\\n        bytes memory withdralDesired = abi.encodePacked(bytes1(0x01), bytes11(0x0), address(a));\\n        return withdralDesired;\\n    }\\n\\n    ///@dev allows pool owner to change the art for the NFTs in the pool\\n    function setArt(IFrensArt newArtContract) external onlyOwner {\\n        IFrensArt newFrensArt = newArtContract;\\n        string memory newArt = newFrensArt.renderTokenById(0);\\n        require(bytes(newArt).length != 0, \\\"invalid art contract\\\");\\n        artForPool = newArtContract;\\n    }\\n\\n    function callSSVNetwork(bytes memory data) public onlyOwner {\\n        address ssvNetwork = frensStorage.getAddress(keccak256(abi.encodePacked(\\\"external.contract.address\\\", \\\"SSVNetwork\\\")));\\n        (bool success, ) = ssvNetwork.call(data);\\n        require(success, \\\"Call failed\\\");\\n    }\\n\\n    // to support receiving ETH by default\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x736a852a2af7544783ab6916ce0ecb01d7e251e23a2d8f1e64af8d14fc9417cb\",\"license\":\"MIT\"},\"contracts/StakingPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\n///@title Frens Staking Pool Factory\\n///@author 0xWildhare and Frens team\\n///@dev allows user to create a new staking pool\\n\\nimport \\\"./StakingPool.sol\\\";\\nimport \\\"./interfaces/IStakingPoolFactory.sol\\\";\\nimport \\\"./interfaces/IFrensPoolShare.sol\\\";\\nimport \\\"./interfaces/IFrensArt.sol\\\";\\nimport \\\"./interfaces/IFrensStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ncontract StakingPoolFactory is IStakingPoolFactory{\\n    event Create(\\n        address indexed contractAddress,\\n        address creator,\\n        address owner\\n    );\\n\\n    IFrensPoolShare frensPoolShare;\\n    IFrensStorage frensStorage;\\n\\n    constructor(IFrensStorage frensStorage_) {\\n       frensStorage = frensStorage_;\\n       frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\\\"contract.address\\\", \\\"FrensPoolShare\\\"))));\\n    }\\n\\n    ///@dev creates a new pool\\n    ///@return address of new pool\\n    function create(\\n        address _owner,\\n        bool _validatorLocked\\n    )\\n        external\\n        returns (\\n            address\\n        )\\n    {\\n        StakingPool stakingPool = new StakingPool(\\n            _owner,\\n            _validatorLocked,\\n            frensStorage\\n        );\\n        // allow this stakingpool to mint shares in our NFT contract\\n        IAccessControl(address(frensPoolShare)).grantRole(keccak256(\\\"MINTER_ROLE\\\"),address(stakingPool));\\n        emit Create(address(stakingPool), msg.sender, address(this));\\n        return (address(stakingPool));\\n    }\\n}\\n\",\"keccak256\":\"0xf760f8cf93eaaade5978ce0c7cdb1fe02dc4cf344ac30db5c8ab315dc29ddb3d\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositContract.sol\":{\"content\":\"\\npragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IDepositContract {\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    function get_deposit_count() external view returns (bytes memory);\\n\\n}\\n\",\"keccak256\":\"0x839f7e3c08d72fc538e0889fb75065435242ae3b9d81c839176a8309326775db\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensArt.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\ninterface IFrensArt {\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ca4f7eb7011a8f1ed7a6d9a0f88ab68b29d49b63aa8864a694b63d5551a0bad\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensOracle.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\n\\ninterface IFrensOracle {\\n\\n   function checkValidatorState(address pool) external returns(bool);\\n\\n   function setExiting(bytes memory pubKey, bool isExiting) external;\\n\\n}\",\"keccak256\":\"0xb8fb907cadbdd9dd146bd3179d385be91b039955df1eb85731afbbed01894e57\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensPoolShare.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\\\";\\n\\n\\ninterface IFrensPoolShare is IERC721Enumerable{\\n  \\n  function poolByIds(uint _id) external view returns(address);\\n\\n  function mint(address userAddress) external;\\n\\n  function burn(uint tokenId) external;\\n\\n  function exists(uint _id) external view returns(bool);\\n\\n  function getPoolById(uint _id) external view returns(address);\\n\\n  function tokenURI(uint256 id) external view returns (string memory);\\n\\n  function renderTokenById(uint256 id) external view returns (string memory);\\n\\n}\\n\",\"keccak256\":\"0xef1985c0b95767f7b96d1f21aed9e48142c021d25d574f0615323ec2b83ad996\",\"license\":\"MIT\"},\"contracts/interfaces/IFrensStorage.sol\":{\"content\":\"pragma solidity 0.8.20;\\n\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\\n\\ninterface IFrensStorage {\\n\\n   \\n    // Guardian\\n    function getGuardian() external view returns(address);\\n    function setGuardian(address _newAddress) external;\\n    function confirmGuardian() external;\\n    function burnKeys() external;\\n\\n    // Getters\\n    function getAddress(bytes32 _key) external view returns (address);\\n    function getUint(bytes32 _key) external view returns (uint);\\n    function getBool(bytes32 _key) external view returns (bool);   \\n\\n    // Setters\\n    function setAddress(bytes32 _key, address _value) external;\\n    function setUint(bytes32 _key, uint _value) external;\\n    function setBool(bytes32 _key, bool _value) external;    \\n\\n    // Deleters\\n    function deleteAddress(bytes32 _key) external;\\n    function deleteUint(bytes32 _key) external;\\n    function deleteBool(bytes32 _key) external;    \\n\\n    // Arithmetic \\n    function addUint(bytes32 _key, uint256 _amount) external;\\n    function subUint(bytes32 _key, uint256 _amount) external;\\n    \\n}\\n\",\"keccak256\":\"0xfd293708621d8eb26c25db108d90583d36ab7f4a7f1f71a75e0b6f54c9a0a451\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPool {\\n\\n    function pubKey() external view returns(bytes memory);\\n\\n    function depositForId(uint _id) external view returns (uint);\\n\\n    function totalDeposits() external view returns(uint);\\n\\n    function transferLocked() external view returns(bool);\\n\\n    function locked(uint id) external view returns(bool);\\n\\n    function artForPool() external view returns (IFrensArt);\\n\\n    function owner() external view returns (address);\\n\\n    function depositToPool() external payable;\\n\\n    function addToDeposit(uint _id) external payable;\\n\\n    function withdraw(uint _id, uint _amount) external;\\n\\n    function claim(uint id) external;\\n\\n    function getIdsInThisPool() external view returns(uint[] memory);\\n\\n    function getShare(uint _id) external view returns (uint);\\n\\n    function getDistributableShare(uint _id) external view returns (uint);\\n\\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\\n\\n    function setPubKey(\\n        bytes calldata pubKey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function getState() external view returns (string memory);\\n\\n    // function getDepositAmount(uint _id) external view returns(uint);\\n\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external;\\n\\n    function stake() external;\\n\\n}\\n\",\"keccak256\":\"0xfcce7e4e1de632af6ab1d89918ff97980a3b0e282eab86875e86128c41260574\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPoolFactory.sol\":{\"content\":\"pragma solidity 0.8.20;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./IFrensArt.sol\\\";\\n\\ninterface IStakingPoolFactory {\\n\\n  function create(\\n    address _owner, \\n    bool _validatorLocked \\n    //bool frensLocked,\\n    //uint poolMin,\\n    //uint poolMax\\n   ) external returns(address);\\n\\n}\\n\",\"keccak256\":\"0x004e7a6a1ea7ac2dd49f26e4b423da2e87b4c9014867ec81f9572a15e0fba4a1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040908082523461014d578061330a803803809161001f8285610151565b833960209283918101031261014d57516001600160a01b0380821692909183900361014d57600180546001600160a01b0319908116851790915584516f636f6e74726163742e6164647265737360801b8382019081526d4672656e73506f6f6c536861726560901b6030830152601e825291949092838701929091906001600160401b038411858510176101395760248484938193828c52885190206321f8a72160e01b835260448901525afa92831561012f575f936100f2575b50505016905f5416175f555161319590816101758239f35b813d8311610128575b6101058185610151565b81010312610124575190828216820361012157505f80806100da565b80fd5b5080fd5b503d6100fb565b86513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b601f909101601f19168101906001600160401b038211908210176101395760405256fe60806040908082526004361015610014575f80fd5b5f91823560e01c63319e909014610029575f80fd5b3461016d578060031936011261016d576001600160a01b03916004358381169190829003610193576024359182151580930361018f578460015416612fc8938484019267ffffffffffffffff958585108786111761017b5792859491928a9796936060956101988639835260208301528782015203019083f09384156101715780835416941693803b1561016d5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101635761013c575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b811161014f576020935081525f80610104565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8a52604160045260248afd5b8580fd5b8480fdfe6080604090808252346200043b5760608162002fc8803803809162000025828562000946565b8339810103126200043b576200003b816200096a565b6020836200004b8285016200097f565b9301516001600160a01b0393848216918290036200043b576200006e336200098d565b84841615620008a45781156200084c5760018060a01b0319948286601154161760115586518481016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000ce81620008fa565b519020928851976321f8a72160e01b92838a52600495868b015260249988818c818b5afa8015620006da5786915f916200080d575b50168015620007ba578260105416176010558a518881019182526d4672656e73506f6f6c536861726560901b6030820152601e81526200014381620008fa565b5190208a51908482528682015287818b818a5afa8015620006505785915f916200077b575b501681600f541617600f558951958787017f65787465726e616c2e636f6e74726163742e6164647265737300000000000000978882526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603982015260288152620001c5816200092a565b5190208b51908582528782015288818c81855afa8015620006da5786915f916200073c575b50168015620006e4578260125416176012558a51888101907f70726f746f636f6c2e6665652e70657263656e740000000000000000000000008252601481526200023481620008fa565b5190208b519063bd02d0f560e01b82528782015288818c81855afa8015620006da575f90620006a6575b600a915080600855116200065a57878b51818101907f70726f746f636f6c2e6665652e726563697069656e7400000000000000000000825260168152620002a581620008fa565b5190208b8d51809481938983528b8301525afa8015620006505785915f9162000611575b50168091600e541617600e5515620005bd5760ff801960095416911515168091176009555f14620005a5575f805460ff60a01b191690555b8160115416908851868101908682526729a9ab2a37b5b2b760c11b60398201526021815262000330816200092a565b5190208951908282528582015286818a81865afa80156200059b5784915f916200055c575b50169485156200050357908887928b51848101918252695353564e6574776f726b60b01b6039820152602381526200038d816200092a565b519020918b5194859384928352888301525afa908115620004f9575f91620004b9575b501691821562000451578392915f6044928951988995869463095ea7b360e01b86528501528219908401525af18015620004475762000404575b83620003f6836200098d565b516125f49081620009d48239f35b82813d83116200043f575b6200041b818362000946565b810103126200043b5762000433620003f6926200097f565b505f620003ea565b5f80fd5b503d6200040f565b84513d5f823e3d90fd5b865162461bcd60e51b81528083018590526038818801527f4652454e5320636f6e7472616374206572726f72206e6f20535356206e65747760448201527f6f726b20636f6e747261637420616464726573732073657400000000000000006064820152608490fd5b908582813d8311620004f1575b620004d2818362000946565b81010312620004ee5750620004e7906200096a565b5f620003b0565b80fd5b503d620004c6565b88513d5f823e3d90fd5b895162461bcd60e51b8152808601889052602e818b01527f4652454e5320636f6e7472616374206572726f72206e6f2053535620746f6b6560448201526d1b8818dbdb9d1c9858dd081cd95d60921b6064820152608490fd5b91508782813d831162000593575b62000576818362000946565b81010312620004ee57506200058c84916200096a565b5f62000355565b503d6200056a565b8a513d5f823e3d90fd5b5f805460ff60a01b1916600160a01b17905562000301565b885162461bcd60e51b81528085018790526029818a01527f4652454e5320636f6e7472616374206572726f72206e6f2066656520726563696044820152681c1a595b9d081cd95d60ba1b6064820152608490fd5b91508882813d831162000648575b6200062b818362000946565b81010312620004ee57506200064185916200096a565b5f620002c9565b503d6200061f565b8b513d5f823e3d90fd5b8a5162461bcd60e51b81528087018990526021818c01527f4652454e5320636f6e7472616374206572726f722066656520746f6f206869676044820152600d60fb1b6064820152608490fd5b8982813d8311620006d2575b620006be818362000946565b81010312620004ee5750600a90516200025e565b503d620006b2565b8c513d5f823e3d90fd5b508a5162461bcd60e51b8152808701899052602c818c01527f4652454e5320636f6e7472616374206572726f72206e6f204465706f7369742060448201526b18dbdb9d1c9858dd081cd95d60a21b6064820152608490fd5b91508982813d831162000773575b62000756818362000946565b81010312620004ee57506200076c86916200096a565b5f620001ea565b503d6200074a565b91508882813d8311620007b2575b62000795818362000946565b81010312620004ee5750620007ab85916200096a565b5f62000168565b503d62000789565b508a5162461bcd60e51b81528087018990526027818c01527f4652454e5320636f6e7472616374206572726f72206e6f206172742061646472604482015266195cdcc81cd95d60ca1b6064820152608490fd5b91508982813d831162000844575b62000827818362000946565b81010312620004ee57506200083d86916200096a565b5f62000103565b503d6200081b565b855162461bcd60e51b815260048101849052602b60248201527f4652454e5320636f6e7472616374206572726f72206e6f2073746f726167652060448201526a1859191c995cdcc81cd95d60aa1b6064820152608490fd5b855162461bcd60e51b815260048101849052602960248201527f4652454e5320636f6e7472616374206572726f72206e6f206f776e6572206164604482015268191c995cdcc81cd95d60ba1b6064820152608490fd5b604081019081106001600160401b038211176200091657604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b038211176200091657604052565b601f909101601f19168101906001600160401b038211908210176200091657604052565b51906001600160a01b03821682036200043b57565b519081151582036200043b57565b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604081815260048036101561001e575b505050361561001c57005b005b5f92833560e01c9081630c3f6acf146115f65750806312686aae146115cf5780631865c57d1461159e5780632cf2cd48146115775780632daad61d1461155057806330dbf88714611527578063379607f5146110f75780633a4b66f1146110de57806341c61383146110bf578063441a3e7014610eb457806345b58fe414610e015780634690484014610dd85780634b2b4e3614610d1b57806351ff484714610cf6578063591167c714610ccd578063678e300a14610cad578063715018a614610c53578063735a531314610ad45780637d88209714610ab55780637fd6f15c14610a965780638620891c146108e8578063888e9cf8146108b05780638ae578fd146108875780638da5cb5b1461085f5780639426e22614610838578063ac2a5dfd14610813578063b45a3c0e146107e7578063cfb5a5f81461073e578063e2d9ae3e1461071f578063e3f05d83146106fb578063e4a50276146106b9578063e6b1a3ae14610579578063e920eec01461054d578063e94ad65b14610520578063f2fde38b14610456578063f9faa104146102035763fc03bad20361001157346101ff5760203660031901126101ff57606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101ff57341561041f5760ff835460a01c168181101561040c5760016102319114611a50565b6102516801bc16d674ec80000061024a60055434611a95565b1115611ab6565b600f5482516318160ddd60e01b8152602093909290916001600160a01b0390859085908490829085165afa9384156104025786946103cf575b508386526001855234838720556102a334600554611a95565b600555600754680100000000000000008110156103bc57906102cd826001899594016007556119b0565b81549060031b9087821b915f19901b19161790558483526002865260018484205560ff60095460081c16600387528484209060ff801983541691151516179055600f5416803b156101ff5760248392855194859384926335313c2160e11b845233908401525af180156103b257610378575b5091606091837fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc9451923484523390840152820152a180f35b917fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc9391946103a86060946118f8565b949193509161033f565b82513d87823e3d90fd5b634e487b7160e01b875260418352602487fd5b9093508481813d83116103fb575b6103e7818361193c565b810103126103f75751925f61028a565b8580fd5b503d6103dd565b83513d88823e3d90fd5b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b5090346101ff5760203660031901126101ff576001600160a01b0382358181169391929084900361051c576104896119f9565b83156104ca57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b50503461054957816003193601126105495760125490516001600160a01b039091168152602090f35b5080fd5b83346105765761057361055f366116ad565b9561056e9591959492946119f9565b611df5565b80f35b80fd5b50346101ff576020806003193601126106b55781356001600160a01b038116939084900361051c576105a96119f9565b805163516b636d60e11b81528381018690528581602481885afa9081156106ab57869161062e575b5051156105f6575050506bffffffffffffffffffffffff60a01b601054161760105580f35b5162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e61063f818361193c565b81019083818303126106a75780519067ffffffffffffffff82116106a3570181601f820112156106a75780516106748161195e565b926106818551948561193c565b8184528582840101116106a35761069d91858085019101611635565b5f6105d1565b8780fd5b8680fd5b82513d88823e3d90fd5b8380fd5b50503461054957816003193601126105495780516106f7916106e5826106de81611874565b038361193c565b51918291602083526020830190611656565b0390f35b50503461054957816003193601126105495760209060ff6009541690519015158152f35b505034610549578160031936011261054957602090600d549051908152f35b50346101ff5760203660031901126101ff57600f548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa9182156107dd57916107a2916107a79493602097926107ae575b50163014611b33565b6123d0565b9051908152f35b6107cf919250873d81116107d6575b6107c7818361193c565b810190611b14565b905f610799565b503d6107bd565b84513d87823e3d90fd5b50346101ff5760203660031901126101ff578160209360ff923581526003855220541690519015158152f35b50503461054957816003193601126105495780516106f7916106e5826106de8161174f565b50503461054957816003193601126105495760209060ff60095460101c1690519015158152f35b505034610549578160031936011261054957905490516001600160a01b039091168152602090f35b50503461054957816003193601126105495760105490516001600160a01b039091168152602090f35b50346101ff5760203660031901126101ff57359160075483101561057657506108da6020926119b0565b91905490519160031b1c8152f35b509190602092836003193601126101ff5780359060ff845460a01c1681811015610a835760016109189114611a50565b6109316801bc16d674ec80000061024a60055434611a95565b600f548351631dc82a7560e01b81528281018490526001600160a01b03918216918782602481865afa918215610a795788926024949261097a928a92610a615750163014611b33565b855192838092634f558e7960e01b825287878301525afa9081156107dd578591610a34575b50156109fd57508293817f2e4d11c40e9ddf229c2807835f88a91899498f9e8531757e8489a824b1bdc1199452600181528285206109de348254611a95565b90556109ec34600554611a95565b60055582519182523490820152a180f35b825162461bcd60e51b815290810185905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610a549150863d8811610a5a575b610a4c818361193c565b810190611b7f565b5f61099f565b503d610a42565b6107cf919250853d87116107d6576107c7818361193c565b86513d89823e3d90fd5b634e487b7160e01b855260218252602485fd5b5050346105495781600319360112610549576020906008549051908152f35b5050346105495781600319360112610549576020906005549051908152f35b5090346101ff57602090816003193601126106b55767ffffffffffffffff83358181116103f757366023820112156103f757610b19903690602481880135910161197a565b90610b226119f9565b60115483517f65787465726e616c2e636f6e74726163742e6164647265737300000000000000868201908152695353564e6574776f726b60b01b603983015260238252909260608401926001600160a01b03169190831184841017610c40578260248180948a948d9998978b52875190206321f8a72160e01b835260648801525afa918215610c365790849392918492610c03575b5050828683519301915af1610bca61238e565b5015610bd4578380f35b5162461bcd60e51b815291820152600b60248201526a10d85b1b0819985a5b195960aa1b604482015260649150fd5b610c27925060609088903d8a11610c2e575b610c1f828561193c565b010190611b14565b5f80610bb7565b3d9150610c15565b85513d86823e3d90fd5b634e487b7160e01b895260418852602489fd5b8334610576578060031936011261057657610c6c6119f9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50913461057657602036600319011261057657506107a760209235612441565b505034610549578160031936011261054957600f5490516001600160a01b039091168152602090f35b50503461054957816003193601126105495780516106f7916106e5826106de816117f0565b50346101ff57610d2a366116ad565b93610d399896989391936119f9565b60095460101c60ff1615610dc357505050505092610d5a919293369161197a565b602081519101208151610d7781610d708161174f565b038261193c565b6020815191012003610d8e5750505b610573611bd1565b906020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92955092955092610dd396611df5565b610d86565b505034610549578160031936011261054957600e5490516001600160a01b039091168152602090f35b8284346105765780600319360112610576579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b818110610ea05750505081610e6591038261193c565b83519485948186019282875251809352850193925b828110610e8957505050500390f35b835185528695509381019392810192600101610e7a565b825484529288019260019283019201610e4f565b50346101ff57816003193601126101ff57803590602480359160ff865460a01c16818110156110ad576001610ee99114611a50565b600f5485516331a9108f60e11b8082528382018790526020949290916001600160a01b0391869082908690829086165afa80156110a35782918b91611086575b50163303611054578689526001855285888a20541061101b579286928594928a9693858852600185528a8820610f608a8254612381565b9055610f6e89600554612381565b600555600f54168a51958694859384528301525afa9182156110115792808080877f71ef96c43343734b1d843bb85d52ef329f5e9143e4d35827771e3b0dd90c5f849a96610fd396610fee998492610ff4575b50505af1610fcd61238e565b50611dba565b51928352602083019190915233604083015281906060820190565b0390a180f35b61100a9250803d106107d6576107c7818361193c565b5f80610fc1565b86513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b61109d9150873d89116107d6576107c7818361193c565b5f610f29565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346105495781600319360112610549576020906006549051908152f35b8334610576578060031936011261057657610d866119f9565b50919034610549576020806003193601126101ff57600f548251631dc82a7560e01b8152853581870181905292916024916001600160a01b0391849082908590829086165afa908115610a79579061115a91889161150a575b5082163014611b33565b60ff865460a01c1696808810156114f857600188146114b65760644711156114665795969495879560031461145d57816011541692848851818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526111cd81611920565b519020828a51809781936321f8a72160e01b8352878301525afa938415611453578382899688938891611436575b508b5163404df7b160e11b815230878201529a8b938492165af196871561142c57849761140d575b5086806113da575b6113c4575b611239866123d0565b968685526002865288852061124f898254611a95565b905561125d88600654611a95565b6006556008549081151590816113bb575b5061133f575b50600f5488516331a9108f60e11b815292830187905285918391829086165afa938415611335577fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d81932426979284928892610fee97611308575b505091808080936112e29588165af1610fcd61238e565b5192835260208301939093526001600160a01b0390921660408201529081906060820190565b84938493975061132a8493836112e29894903d106107d6576107c7818361193c565b9793509394506112cb565b87513d85823e3d90fd5b87606461134f88949a8a946123bd565b04906001821161136c575b9061136491612381565b979150611274565b9250929394505083600e54165f198301908382116113a9578a95949387936113a1888080808e98611364985af1610fcd61238e565b90915061135a565b634e487b7160e01b8b5260118552888bfd5b9050155f61126e565b835460ff60a01b1916600360a01b178455611230565b5090919260ff905460a01c16828110156113fb57906002899493921461122b565b50634e487b7160e01b88526021825287fd5b611425919750853d8711610a5a57610a4c818361193c565b955f611223565b88513d86823e3d90fd5b61144d9150843d86116107d6576107c7818361193c565b5f6111fb565b88513d89823e3d90fd5b60019592611230565b855162461bcd60e51b81529081018490526025818401527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152908101849052601c818401527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602190528186fd5b6115219150853d87116107d6576107c7818361193c565b5f611150565b50503461054957816003193601126105495760115490516001600160a01b039091168152602090f35b50346101ff5760203660031901126101ff5760209282913581526001845220549051908152f35b50346101ff5760203660031901126101ff5760209282913581526002845220549051908152f35b5050346105495781600319360112610549576106f7906115bc6124b9565b9051918291602083526020830190611656565b50503461054957816003193601126105495760209060ff60095460081c1690519015158152f35b9050833461057657806003193601126105765760ff815460a01c16908382101561162257602083838152f35b634e487b7160e01b815260218452602490fd5b5f5b8381106116465750505f910152565b8181015183820152602001611637565b9060209161166f81518092818552858086019101611635565b601f01601f1916010190565b9181601f840112156116a95782359167ffffffffffffffff83116116a957602083818601950101116116a957565b5f80fd5b9060806003198301126116a95767ffffffffffffffff6004358181116116a957836116da9160040161167b565b939093926024358381116116a957826116f59160040161167b565b939093926044359182116116a95761170f9160040161167b565b909160643590565b90600182811c92168015611745575b602083101461173157565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611726565b600a545f929161175e82611717565b808252916001908181169081156117d3575060011461177c57505050565b91929350600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8915f925b8484106117bb57505060209250010190565b805460208585018101919091529093019281016117a9565b915050602093945060ff929192191683830152151560051b010190565b600c545f92916117ff82611717565b808252916001908181169081156117d3575060011461181d57505050565b91929350600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7915f925b84841061185c57505060209250010190565b8054602085850181019190915290930192810161184a565b600b545f929161188382611717565b808252916001908181169081156117d357506001146118a157505050565b91929350600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915f925b8484106118e057505060209250010190565b805460208585018101919091529093019281016118ce565b67ffffffffffffffff811161190c57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761190c57604052565b90601f8019910116810190811067ffffffffffffffff82111761190c57604052565b67ffffffffffffffff811161190c57601f01601f191660200190565b9291926119868261195e565b91611994604051938461193c565b8294818452818301116116a9578281602093845f960137010152565b6007548110156119e55760075f527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b634e487b7160e01b5f52603260045260245ffd5b5f546001600160a01b03163303611a0c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611a5757565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b91908201809211611aa257565b634e487b7160e01b5f52601160045260245ffd5b15611abd57565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126116a957516001600160a01b03811681036116a95790565b15611b3a57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126116a9575180151581036116a95790565b15611b9e57565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec800000804710611d84578060055403611d49575f90815460ff8160a01c166004811015611d35576001611c0b9114611b97565b60ff60095460101c1615611cfc5760ff60a01b1916600160a11b178255601254600d546001600160a01b0393918416803b156101ff5790829160405180958180946304512a2360e31b825260806004830152611c91611c6c6084840161174f565b611c826003199182868203016024870152611874565b908482030160448501526117f0565b90606483015203925af1908115611cf05750916040917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293611ce1575b50601254168151908152336020820152a1565b611cea906118f8565b5f611cce565b604051903d90823e3d90fd5b60405162461bcd60e51b81526020600482015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b15611dc157565b634e487b7160e01b5f52600160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b949190939695926040519160209283810190600160f81b82525f918260218301523060601b602c830152858252611e2b82611920565b611e3636868661197a565b868151910120915190200361233c5760095460ff81166122fa575b5060ff815460a01c169060048210156122e657611e716001809314611b97565b67ffffffffffffffff908189116120d757611e8d600a54611717565b9189601f93848111612282575b50828482116001146121f75783916121ec575b505f1960038c901b1c19168a851b17600a555b8086116121d857611ed2600b54611717565b838111612176575b5085828482116001146120f65783916120eb575b505f19600388901b1c191686851b17600b555b87116120d757611f12600c54611717565b828111612075575b5080918711600114611fcc579286807ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89c9d9794611fb6999794611fa89793611fc1575b501b905f198760031b1c191617600c555b87600d556201000062ff0000196009541617600955611f9b6040519a8b9a60808c5260808c0191611dd5565b92898403908a0152611dd5565b918583036040870152611dd5565b9060608301520390a1565b89013592505f611f5e565b90601f198716600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7925b818110612060575092879592611fa89592611fb6997ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89e9f999610612047575b505085811b01600c55611f6f565b8801355f19600389901b60f8161c191690555f80612039565b8d830135845592840192918701918701611ff9565b600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c783808a0160051c820192898b106120ce575b0160051c019084905b8281106120c3575050611f1a565b8381550184906120b5565b925081926120ac565b634e487b7160e01b81526041600452602490fd5b90508501355f611eee565b600b84527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915087601f198116855b8b8983831061215f5750505010612146575b50508386811b01600b55611f01565b8601355f19600389901b60f8161c191690555f80612137565b858c0135875590950194938401938b935001612125565b600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db98480890160051c8201928a8a106121cf575b0160051c019085905b8281106121c4575050611eda565b8481550185906121b6565b925081926121ad565b634e487b7160e01b82526041600452602482fd5b90508b01355f611ead565b8c91601f198116600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8938b8988925b848410612262575050505010612249575b5050838a811b01600a55611ec0565b8c01355f1960038d901b60f8161c191690555f8061223a565b8294955095809791929396013581550194019201908d918f898d91612229565b600a8452847fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8918a82850160051c840194106122dd575b0160051c019085905b8281106122d257508b9150611e9a565b8481550185906122c2565b925081926122b9565b634e487b7160e01b81526021600452602490fd5b81549060ff8260a01c166004811015611d35576123279161231d60ff9215611b97565b60101c1615611dba565b60ff60a01b1916600160a01b1781555f611e51565b60405162461bcd60e51b815260048101859052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b91908203918211611aa257565b3d156123b8573d9061239f8261195e565b916123ad604051938461193c565b82523d5f602084013e565b606090565b81810292918115918404141715611aa257565b471561243c575f9081526001602052604081205460026020526124056040832054916123ff4760065490611a95565b906123bd565b60055490811561242857048015612423576124209250612381565b90565b505090565b634e487b7160e01b84526012600452602484fd5b505f90565b60ff5f5460a01c169060048210156124a557600182036124615750505f90565b61246a906123d0565b90600854908115159081612499575b50612482575090565b90606461249282612420946123bd565b0490612381565b6003915014155f612479565b634e487b7160e01b5f52602160045260245ffd5b60ff5f5460a01c1660048110156124a55780156125845760028114612561576001811461253257600314612510576040516124f381611920565b600d81526c7374617465206661696c75726560981b602082015290565b60405161251c81611920565b6006815265195e1a5d195960d21b602082015290565b5060405161253f81611920565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161256e81611920565b60068152651cdd185ad95960d21b602082015290565b5060405161259181611920565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fea264697066735822122054342eebaa13a9be4da158252e49960d94455c1ca331f397c3175bbda88ce0b764736f6c63430008140033a264697066735822122082e9dc75b3d04305202f5f3bf04409e236ee160bc428fcbd003ae3f075e1693a64736f6c63430008140033",
  "deployedBytecode": "0x60806040908082526004361015610014575f80fd5b5f91823560e01c63319e909014610029575f80fd5b3461016d578060031936011261016d576001600160a01b03916004358381169190829003610193576024359182151580930361018f578460015416612fc8938484019267ffffffffffffffff958585108786111761017b5792859491928a9796936060956101988639835260208301528782015203019083f09384156101715780835416941693803b1561016d5782906044855180958193632f2ff15d60e01b83527f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a660048401528960248401525af180156101635761013c575b60208484817fb224da6575b2c2ffd42454faedb236f7dbe5f92a0c96bb99c0273dbe98464c7e8280513381523087820152a251908152f35b811161014f576020935081525f80610104565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8280fd5b83513d84823e3d90fd5b634e487b7160e01b8a52604160045260248afd5b8580fd5b8480fdfe6080604090808252346200043b5760608162002fc8803803809162000025828562000946565b8339810103126200043b576200003b816200096a565b6020836200004b8285016200097f565b9301516001600160a01b0393848216918290036200043b576200006e336200098d565b84841615620008a45781156200084c5760018060a01b0319948286601154161760115586518481016f636f6e74726163742e6164647265737360801b9182825267119c995b9cd05c9d60c21b603082015260188152620000ce81620008fa565b519020928851976321f8a72160e01b92838a52600495868b015260249988818c818b5afa8015620006da5786915f916200080d575b50168015620007ba578260105416176010558a518881019182526d4672656e73506f6f6c536861726560901b6030820152601e81526200014381620008fa565b5190208a51908482528682015287818b818a5afa8015620006505785915f916200077b575b501681600f541617600f558951958787017f65787465726e616c2e636f6e74726163742e6164647265737300000000000000978882526e11195c1bdcda5d10dbdb9d1c9858dd608a1b603982015260288152620001c5816200092a565b5190208b51908582528782015288818c81855afa8015620006da5786915f916200073c575b50168015620006e4578260125416176012558a51888101907f70726f746f636f6c2e6665652e70657263656e740000000000000000000000008252601481526200023481620008fa565b5190208b519063bd02d0f560e01b82528782015288818c81855afa8015620006da575f90620006a6575b600a915080600855116200065a57878b51818101907f70726f746f636f6c2e6665652e726563697069656e7400000000000000000000825260168152620002a581620008fa565b5190208b8d51809481938983528b8301525afa8015620006505785915f9162000611575b50168091600e541617600e5515620005bd5760ff801960095416911515168091176009555f14620005a5575f805460ff60a01b191690555b8160115416908851868101908682526729a9ab2a37b5b2b760c11b60398201526021815262000330816200092a565b5190208951908282528582015286818a81865afa80156200059b5784915f916200055c575b50169485156200050357908887928b51848101918252695353564e6574776f726b60b01b6039820152602381526200038d816200092a565b519020918b5194859384928352888301525afa908115620004f9575f91620004b9575b501691821562000451578392915f6044928951988995869463095ea7b360e01b86528501528219908401525af18015620004475762000404575b83620003f6836200098d565b516125f49081620009d48239f35b82813d83116200043f575b6200041b818362000946565b810103126200043b5762000433620003f6926200097f565b505f620003ea565b5f80fd5b503d6200040f565b84513d5f823e3d90fd5b865162461bcd60e51b81528083018590526038818801527f4652454e5320636f6e7472616374206572726f72206e6f20535356206e65747760448201527f6f726b20636f6e747261637420616464726573732073657400000000000000006064820152608490fd5b908582813d8311620004f1575b620004d2818362000946565b81010312620004ee5750620004e7906200096a565b5f620003b0565b80fd5b503d620004c6565b88513d5f823e3d90fd5b895162461bcd60e51b8152808601889052602e818b01527f4652454e5320636f6e7472616374206572726f72206e6f2053535620746f6b6560448201526d1b8818dbdb9d1c9858dd081cd95d60921b6064820152608490fd5b91508782813d831162000593575b62000576818362000946565b81010312620004ee57506200058c84916200096a565b5f62000355565b503d6200056a565b8a513d5f823e3d90fd5b5f805460ff60a01b1916600160a01b17905562000301565b885162461bcd60e51b81528085018790526029818a01527f4652454e5320636f6e7472616374206572726f72206e6f2066656520726563696044820152681c1a595b9d081cd95d60ba1b6064820152608490fd5b91508882813d831162000648575b6200062b818362000946565b81010312620004ee57506200064185916200096a565b5f620002c9565b503d6200061f565b8b513d5f823e3d90fd5b8a5162461bcd60e51b81528087018990526021818c01527f4652454e5320636f6e7472616374206572726f722066656520746f6f206869676044820152600d60fb1b6064820152608490fd5b8982813d8311620006d2575b620006be818362000946565b81010312620004ee5750600a90516200025e565b503d620006b2565b8c513d5f823e3d90fd5b508a5162461bcd60e51b8152808701899052602c818c01527f4652454e5320636f6e7472616374206572726f72206e6f204465706f7369742060448201526b18dbdb9d1c9858dd081cd95d60a21b6064820152608490fd5b91508982813d831162000773575b62000756818362000946565b81010312620004ee57506200076c86916200096a565b5f620001ea565b503d6200074a565b91508882813d8311620007b2575b62000795818362000946565b81010312620004ee5750620007ab85916200096a565b5f62000168565b503d62000789565b508a5162461bcd60e51b81528087018990526027818c01527f4652454e5320636f6e7472616374206572726f72206e6f206172742061646472604482015266195cdcc81cd95d60ca1b6064820152608490fd5b91508982813d831162000844575b62000827818362000946565b81010312620004ee57506200083d86916200096a565b5f62000103565b503d6200081b565b855162461bcd60e51b815260048101849052602b60248201527f4652454e5320636f6e7472616374206572726f72206e6f2073746f726167652060448201526a1859191c995cdcc81cd95d60aa1b6064820152608490fd5b855162461bcd60e51b815260048101849052602960248201527f4652454e5320636f6e7472616374206572726f72206e6f206f776e6572206164604482015268191c995cdcc81cd95d60ba1b6064820152608490fd5b604081019081106001600160401b038211176200091657604052565b634e487b7160e01b5f52604160045260245ffd5b606081019081106001600160401b038211176200091657604052565b601f909101601f19168101906001600160401b038211908210176200091657604052565b51906001600160a01b03821682036200043b57565b519081151582036200043b57565b5f80546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604081815260048036101561001e575b505050361561001c57005b005b5f92833560e01c9081630c3f6acf146115f65750806312686aae146115cf5780631865c57d1461159e5780632cf2cd48146115775780632daad61d1461155057806330dbf88714611527578063379607f5146110f75780633a4b66f1146110de57806341c61383146110bf578063441a3e7014610eb457806345b58fe414610e015780634690484014610dd85780634b2b4e3614610d1b57806351ff484714610cf6578063591167c714610ccd578063678e300a14610cad578063715018a614610c53578063735a531314610ad45780637d88209714610ab55780637fd6f15c14610a965780638620891c146108e8578063888e9cf8146108b05780638ae578fd146108875780638da5cb5b1461085f5780639426e22614610838578063ac2a5dfd14610813578063b45a3c0e146107e7578063cfb5a5f81461073e578063e2d9ae3e1461071f578063e3f05d83146106fb578063e4a50276146106b9578063e6b1a3ae14610579578063e920eec01461054d578063e94ad65b14610520578063f2fde38b14610456578063f9faa104146102035763fc03bad20361001157346101ff5760203660031901126101ff57606092818392358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b8280fd5b50826003193601126101ff57341561041f5760ff835460a01c168181101561040c5760016102319114611a50565b6102516801bc16d674ec80000061024a60055434611a95565b1115611ab6565b600f5482516318160ddd60e01b8152602093909290916001600160a01b0390859085908490829085165afa9384156104025786946103cf575b508386526001855234838720556102a334600554611a95565b600555600754680100000000000000008110156103bc57906102cd826001899594016007556119b0565b81549060031b9087821b915f19901b19161790558483526002865260018484205560ff60095460081c16600387528484209060ff801983541691151516179055600f5416803b156101ff5760248392855194859384926335313c2160e11b845233908401525af180156103b257610378575b5091606091837fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc9451923484523390840152820152a180f35b917fd91527a40417d48f76ba016aaa9157e2ddaca6cb5b660432901659cb075058fc9391946103a86060946118f8565b949193509161033f565b82513d87823e3d90fd5b634e487b7160e01b875260418352602487fd5b9093508481813d83116103fb575b6103e7818361193c565b810103126103f75751925f61028a565b8580fd5b503d6103dd565b83513d88823e3d90fd5b634e487b7160e01b845260218252602484fd5b6020606492519162461bcd60e51b8352820152601260248201527136bab9ba103232b837b9b4ba1032ba3432b960711b6044820152fd5b5090346101ff5760203660031901126101ff576001600160a01b0382358181169391929084900361051c576104896119f9565b83156104ca57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b50503461054957816003193601126105495760125490516001600160a01b039091168152602090f35b5080fd5b83346105765761057361055f366116ad565b9561056e9591959492946119f9565b611df5565b80f35b80fd5b50346101ff576020806003193601126106b55781356001600160a01b038116939084900361051c576105a96119f9565b805163516b636d60e11b81528381018690528581602481885afa9081156106ab57869161062e575b5051156105f6575050506bffffffffffffffffffffffff60a01b601054161760105580f35b5162461bcd60e51b81529182015260146024820152731a5b9d985b1a5908185c9d0818dbdb9d1c9858dd60621b604482015260649150fd5b90503d8087833e61063f818361193c565b81019083818303126106a75780519067ffffffffffffffff82116106a3570181601f820112156106a75780516106748161195e565b926106818551948561193c565b8184528582840101116106a35761069d91858085019101611635565b5f6105d1565b8780fd5b8680fd5b82513d88823e3d90fd5b8380fd5b50503461054957816003193601126105495780516106f7916106e5826106de81611874565b038361193c565b51918291602083526020830190611656565b0390f35b50503461054957816003193601126105495760209060ff6009541690519015158152f35b505034610549578160031936011261054957602090600d549051908152f35b50346101ff5760203660031901126101ff57600f548251631dc82a7560e01b81528235928101839052906001600160a01b03906020908390602490829085165afa9182156107dd57916107a2916107a79493602097926107ae575b50163014611b33565b6123d0565b9051908152f35b6107cf919250873d81116107d6575b6107c7818361193c565b810190611b14565b905f610799565b503d6107bd565b84513d87823e3d90fd5b50346101ff5760203660031901126101ff578160209360ff923581526003855220541690519015158152f35b50503461054957816003193601126105495780516106f7916106e5826106de8161174f565b50503461054957816003193601126105495760209060ff60095460101c1690519015158152f35b505034610549578160031936011261054957905490516001600160a01b039091168152602090f35b50503461054957816003193601126105495760105490516001600160a01b039091168152602090f35b50346101ff5760203660031901126101ff57359160075483101561057657506108da6020926119b0565b91905490519160031b1c8152f35b509190602092836003193601126101ff5780359060ff845460a01c1681811015610a835760016109189114611a50565b6109316801bc16d674ec80000061024a60055434611a95565b600f548351631dc82a7560e01b81528281018490526001600160a01b03918216918782602481865afa918215610a795788926024949261097a928a92610a615750163014611b33565b855192838092634f558e7960e01b825287878301525afa9081156107dd578591610a34575b50156109fd57508293817f2e4d11c40e9ddf229c2807835f88a91899498f9e8531757e8489a824b1bdc1199452600181528285206109de348254611a95565b90556109ec34600554611a95565b60055582519182523490820152a180f35b825162461bcd60e51b815290810185905260116024820152701a5908191bd95cc81b9bdd08195e1a5cdd607a1b6044820152606490fd5b610a549150863d8811610a5a575b610a4c818361193c565b810190611b7f565b5f61099f565b503d610a42565b6107cf919250853d87116107d6576107c7818361193c565b86513d89823e3d90fd5b634e487b7160e01b855260218252602485fd5b5050346105495781600319360112610549576020906008549051908152f35b5050346105495781600319360112610549576020906005549051908152f35b5090346101ff57602090816003193601126106b55767ffffffffffffffff83358181116103f757366023820112156103f757610b19903690602481880135910161197a565b90610b226119f9565b60115483517f65787465726e616c2e636f6e74726163742e6164647265737300000000000000868201908152695353564e6574776f726b60b01b603983015260238252909260608401926001600160a01b03169190831184841017610c40578260248180948a948d9998978b52875190206321f8a72160e01b835260648801525afa918215610c365790849392918492610c03575b5050828683519301915af1610bca61238e565b5015610bd4578380f35b5162461bcd60e51b815291820152600b60248201526a10d85b1b0819985a5b195960aa1b604482015260649150fd5b610c27925060609088903d8a11610c2e575b610c1f828561193c565b010190611b14565b5f80610bb7565b3d9150610c15565b85513d86823e3d90fd5b634e487b7160e01b895260418852602489fd5b8334610576578060031936011261057657610c6c6119f9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50913461057657602036600319011261057657506107a760209235612441565b505034610549578160031936011261054957600f5490516001600160a01b039091168152602090f35b50503461054957816003193601126105495780516106f7916106e5826106de816117f0565b50346101ff57610d2a366116ad565b93610d399896989391936119f9565b60095460101c60ff1615610dc357505050505092610d5a919293369161197a565b602081519101208151610d7781610d708161174f565b038261193c565b6020815191012003610d8e5750505b610573611bd1565b906020606492519162461bcd60e51b8352820152600f60248201526e0e0eac496caf240dad2e6dac2e8c6d608b1b6044820152fd5b92955092955092610dd396611df5565b610d86565b505034610549578160031936011261054957600e5490516001600160a01b039091168152602090f35b8284346105765780600319360112610576579080519182906007549182855260208095018093600784527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890845b818110610ea05750505081610e6591038261193c565b83519485948186019282875251809352850193925b828110610e8957505050500390f35b835185528695509381019392810192600101610e7a565b825484529288019260019283019201610e4f565b50346101ff57816003193601126101ff57803590602480359160ff865460a01c16818110156110ad576001610ee99114611a50565b600f5485516331a9108f60e11b8082528382018790526020949290916001600160a01b0391869082908690829086165afa80156110a35782918b91611086575b50163303611054578689526001855285888a20541061101b579286928594928a9693858852600185528a8820610f608a8254612381565b9055610f6e89600554612381565b600555600f54168a51958694859384528301525afa9182156110115792808080877f71ef96c43343734b1d843bb85d52ef329f5e9143e4d35827771e3b0dd90c5f849a96610fd396610fee998492610ff4575b50505af1610fcd61238e565b50611dba565b51928352602083019190915233604083015281906060820190565b0390a180f35b61100a9250803d106107d6576107c7818361193c565b5f80610fc1565b86513d85823e3d90fd5b875162461bcd60e51b8152808501869052601481850152731b9bdd08195b9bdd59da0819195c1bdcda5d195960621b6044820152606490fd5b875162461bcd60e51b8152808501869052600d818501526c3737ba103a34329037bbb732b960991b6044820152606490fd5b61109d9150873d89116107d6576107c7818361193c565b5f610f29565b89513d8c823e3d90fd5b50634e487b7160e01b86526021905284fd5b5050346105495781600319360112610549576020906006549051908152f35b8334610576578060031936011261057657610d866119f9565b50919034610549576020806003193601126101ff57600f548251631dc82a7560e01b8152853581870181905292916024916001600160a01b0391849082908590829086165afa908115610a79579061115a91889161150a575b5082163014611b33565b60ff865460a01c1696808810156114f857600188146114b65760644711156114665795969495879560031461145d57816011541692848851818101906f636f6e74726163742e6164647265737360801b82526a4672656e734f7261636c6560a81b6030820152601b81526111cd81611920565b519020828a51809781936321f8a72160e01b8352878301525afa938415611453578382899688938891611436575b508b5163404df7b160e11b815230878201529a8b938492165af196871561142c57849761140d575b5086806113da575b6113c4575b611239866123d0565b968685526002865288852061124f898254611a95565b905561125d88600654611a95565b6006556008549081151590816113bb575b5061133f575b50600f5488516331a9108f60e11b815292830187905285918391829086165afa938415611335577fd79254e5daba749baa8ba954e77bbbb18efef113a8070d00df9a188d81932426979284928892610fee97611308575b505091808080936112e29588165af1610fcd61238e565b5192835260208301939093526001600160a01b0390921660408201529081906060820190565b84938493975061132a8493836112e29894903d106107d6576107c7818361193c565b9793509394506112cb565b87513d85823e3d90fd5b87606461134f88949a8a946123bd565b04906001821161136c575b9061136491612381565b979150611274565b9250929394505083600e54165f198301908382116113a9578a95949387936113a1888080808e98611364985af1610fcd61238e565b90915061135a565b634e487b7160e01b8b5260118552888bfd5b9050155f61126e565b835460ff60a01b1916600360a01b178455611230565b5090919260ff905460a01c16828110156113fb57906002899493921461122b565b50634e487b7160e01b88526021825287fd5b611425919750853d8711610a5a57610a4c818361193c565b955f611223565b88513d86823e3d90fd5b61144d9150843d86116107d6576107c7818361193c565b5f6111fb565b88513d89823e3d90fd5b60019592611230565b855162461bcd60e51b81529081018490526025818401527f6d7573742062652067726561746572207468616e203130302077656920746f20604482015264636c61696d60d81b6064820152608490fd5b855162461bcd60e51b8152908101849052601c818401527f757365207769746864726177207768656e206e6f74207374616b6564000000006044820152606490fd5b634e487b7160e01b8752602190528186fd5b6115219150853d87116107d6576107c7818361193c565b5f611150565b50503461054957816003193601126105495760115490516001600160a01b039091168152602090f35b50346101ff5760203660031901126101ff5760209282913581526001845220549051908152f35b50346101ff5760203660031901126101ff5760209282913581526002845220549051908152f35b5050346105495781600319360112610549576106f7906115bc6124b9565b9051918291602083526020830190611656565b50503461054957816003193601126105495760209060ff60095460081c1690519015158152f35b9050833461057657806003193601126105765760ff815460a01c16908382101561162257602083838152f35b634e487b7160e01b815260218452602490fd5b5f5b8381106116465750505f910152565b8181015183820152602001611637565b9060209161166f81518092818552858086019101611635565b601f01601f1916010190565b9181601f840112156116a95782359167ffffffffffffffff83116116a957602083818601950101116116a957565b5f80fd5b9060806003198301126116a95767ffffffffffffffff6004358181116116a957836116da9160040161167b565b939093926024358381116116a957826116f59160040161167b565b939093926044359182116116a95761170f9160040161167b565b909160643590565b90600182811c92168015611745575b602083101461173157565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611726565b600a545f929161175e82611717565b808252916001908181169081156117d3575060011461177c57505050565b91929350600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8915f925b8484106117bb57505060209250010190565b805460208585018101919091529093019281016117a9565b915050602093945060ff929192191683830152151560051b010190565b600c545f92916117ff82611717565b808252916001908181169081156117d3575060011461181d57505050565b91929350600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7915f925b84841061185c57505060209250010190565b8054602085850181019190915290930192810161184a565b600b545f929161188382611717565b808252916001908181169081156117d357506001146118a157505050565b91929350600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915f925b8484106118e057505060209250010190565b805460208585018101919091529093019281016118ce565b67ffffffffffffffff811161190c57604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761190c57604052565b90601f8019910116810190811067ffffffffffffffff82111761190c57604052565b67ffffffffffffffff811161190c57601f01601f191660200190565b9291926119868261195e565b91611994604051938461193c565b8294818452818301116116a9578281602093845f960137010152565b6007548110156119e55760075f527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801905f90565b634e487b7160e01b5f52603260045260245ffd5b5f546001600160a01b03163303611a0c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15611a5757565b60405162461bcd60e51b81526020600482015260166024820152756e6f7420616363657074696e67206465706f7369747360501b6044820152606490fd5b91908201809211611aa257565b634e487b7160e01b5f52601160045260245ffd5b15611abd57565b60405162461bcd60e51b815260206004820152602960248201527f746f74616c206465706f736974732063616e6e6f74206265206d6f72652074686044820152680c2dc406664408ae8d60bb1b6064820152608490fd5b908160209103126116a957516001600160a01b03811681036116a95790565b15611b3a57565b60405162461bcd60e51b815260206004820152601960248201527f77726f6e67207374616b696e6720706f6f6c20666f72206964000000000000006044820152606490fd5b908160209103126116a9575180151581036116a95790565b15611b9e57565b60405162461bcd60e51b815260206004820152600b60248201526a77726f6e6720737461746560a81b6044820152606490fd5b6801bc16d674ec800000804710611d84578060055403611d49575f90815460ff8160a01c166004811015611d35576001611c0b9114611b97565b60ff60095460101c1615611cfc5760ff60a01b1916600160a11b178255601254600d546001600160a01b0393918416803b156101ff5790829160405180958180946304512a2360e31b825260806004830152611c91611c6c6084840161174f565b611c826003199182868203016024870152611874565b908482030160448501526117f0565b90606483015203925af1908115611cf05750916040917f72b356fd889b9abd3530accd2c9f4aecbce67d70757181f9f862ac91464ce19293611ce1575b50601254168151908152336020820152a1565b611cea906118f8565b5f611cce565b604051903d90823e3d90fd5b60405162461bcd60e51b81526020600482015260116024820152701d985b1a59185d1bdc881b9bdd081cd95d607a1b6044820152606490fd5b634e487b7160e01b84526021600452602484fd5b60405162461bcd60e51b81526020600482015260136024820152726e6f7420656e6f756768206465706f7369747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0dcdee840cadcdeeaced040cae8d60931b6044820152606490fd5b15611dc157565b634e487b7160e01b5f52600160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b949190939695926040519160209283810190600160f81b82525f918260218301523060601b602c830152858252611e2b82611920565b611e3636868661197a565b868151910120915190200361233c5760095460ff81166122fa575b5060ff815460a01c169060048210156122e657611e716001809314611b97565b67ffffffffffffffff908189116120d757611e8d600a54611717565b9189601f93848111612282575b50828482116001146121f75783916121ec575b505f1960038c901b1c19168a851b17600a555b8086116121d857611ed2600b54611717565b838111612176575b5085828482116001146120f65783916120eb575b505f19600388901b1c191686851b17600b555b87116120d757611f12600c54611717565b828111612075575b5080918711600114611fcc579286807ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89c9d9794611fb6999794611fa89793611fc1575b501b905f198760031b1c191617600c555b87600d556201000062ff0000196009541617600955611f9b6040519a8b9a60808c5260808c0191611dd5565b92898403908a0152611dd5565b918583036040870152611dd5565b9060608301520390a1565b89013592505f611f5e565b90601f198716600c83527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7925b818110612060575092879592611fa89592611fb6997ffd84b86d2e47014cef6e8fc5310d3968b38c5998dd6a57a8b68b350628b8f9f89e9f999610612047575b505085811b01600c55611f6f565b8801355f19600389901b60f8161c191690555f80612039565b8d830135845592840192918701918701611ff9565b600c82527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c783808a0160051c820192898b106120ce575b0160051c019084905b8281106120c3575050611f1a565b8381550184906120b5565b925081926120ac565b634e487b7160e01b81526041600452602490fd5b90508501355f611eee565b600b84527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9915087601f198116855b8b8983831061215f5750505010612146575b50508386811b01600b55611f01565b8601355f19600389901b60f8161c191690555f80612137565b858c0135875590950194938401938b935001612125565b600b83527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db98480890160051c8201928a8a106121cf575b0160051c019085905b8281106121c4575050611eda565b8481550185906121b6565b925081926121ad565b634e487b7160e01b82526041600452602482fd5b90508b01355f611ead565b8c91601f198116600a86527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8938b8988925b848410612262575050505010612249575b5050838a811b01600a55611ec0565b8c01355f1960038d901b60f8161c191690555f8061223a565b8294955095809791929396013581550194019201908d918f898d91612229565b600a8452847fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8918a82850160051c840194106122dd575b0160051c019085905b8281106122d257508b9150611e9a565b8481550185906122c2565b925081926122b9565b634e487b7160e01b81526021600452602490fd5b81549060ff8260a01c166004811015611d35576123279161231d60ff9215611b97565b60101c1615611dba565b60ff60a01b1916600160a01b1781555f611e51565b60405162461bcd60e51b815260048101859052601e60248201527f7769746864726177616c2063726564656e7469616c206d69736d6174636800006044820152606490fd5b91908203918211611aa257565b3d156123b8573d9061239f8261195e565b916123ad604051938461193c565b82523d5f602084013e565b606090565b81810292918115918404141715611aa257565b471561243c575f9081526001602052604081205460026020526124056040832054916123ff4760065490611a95565b906123bd565b60055490811561242857048015612423576124209250612381565b90565b505090565b634e487b7160e01b84526012600452602484fd5b505f90565b60ff5f5460a01c169060048210156124a557600182036124615750505f90565b61246a906123d0565b90600854908115159081612499575b50612482575090565b90606461249282612420946123bd565b0490612381565b6003915014155f612479565b634e487b7160e01b5f52602160045260245ffd5b60ff5f5460a01c1660048110156124a55780156125845760028114612561576001811461253257600314612510576040516124f381611920565b600d81526c7374617465206661696c75726560981b602082015290565b60405161251c81611920565b6006815265195e1a5d195960d21b602082015290565b5060405161253f81611920565b6012815271616363657074696e67206465706f7369747360701b602082015290565b5060405161256e81611920565b60068152651cdd185ad95960d21b602082015290565b5060405161259181611920565b601781527f6177616974696e672076616c696461746f7220696e666f00000000000000000060208201529056fea264697066735822122054342eebaa13a9be4da158252e49960d94455c1ca331f397c3175bbda88ce0b764736f6c63430008140033a264697066735822122082e9dc75b3d04305202f5f3bf04409e236ee160bc428fcbd003ae3f075e1693a64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(address,bool)": {
        "details": "creates a new pool",
        "returns": {
          "_0": "address of new pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6337,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensPoolShare",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IFrensPoolShare)6699"
      },
      {
        "astId": 6340,
        "contract": "contracts/StakingPoolFactory.sol:StakingPoolFactory",
        "label": "frensStorage",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFrensStorage)6799"
      }
    ],
    "types": {
      "t_contract(IFrensPoolShare)6699": {
        "encoding": "inplace",
        "label": "contract IFrensPoolShare",
        "numberOfBytes": "20"
      },
      "t_contract(IFrensStorage)6799": {
        "encoding": "inplace",
        "label": "contract IFrensStorage",
        "numberOfBytes": "20"
      }
    }
  }
}