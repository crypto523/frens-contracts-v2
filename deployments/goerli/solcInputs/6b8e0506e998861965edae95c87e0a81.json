{
  "language": "Solidity",
  "sources": {
    "contracts/FrensArt.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n///@title Frens Art\n///@author 0xWildhare and Frens Team\n///@dev generates the svg artwork for the NFT by compiling strings from various contracts\n\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IPmFont.sol\";\nimport \"./interfaces/IFrensLogo.sol\";\nimport \"./interfaces/IWaves.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\n\ncontract FrensArt {\n\n    IFrensStorage frensStorage;\n    \n    constructor(\n        IFrensStorage frensStorage_\n    ) {\n        frensStorage = frensStorage_;\n    }\n\n    function renderTokenById(uint256 id) external view returns (string memory) {\n        IFrensMetaHelper frensMetaHelper = IFrensMetaHelper(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensMetaHelper\"))));\n        IPmFont pmFont = IPmFont(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"PmFont\"))));\n        IWaves waves = IWaves(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"Waves\"))));\n        IFrensLogo frensLogo = IFrensLogo(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensLogo\"))));\n        string memory depositString = frensMetaHelper.getDepositStringForId(id);\n        string memory pool = frensMetaHelper.getPoolString(id);\n        bytes memory permanentMarker = pmFont.getPmFont();\n        bytes memory logo = frensLogo.getLogo();\n        bytes memory wavesGraphic = waves.getWaves();\n        string memory render = string(\n            abi.encodePacked(\n                \"<defs>\",\n                '<linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">',\n                '<stop offset=\"0%\" style=\"stop-color:#3f19ee;stop-opacity:1\" />',\n                '<stop offset=\"100%\" style=\"stop-color:#54dae0;stop-opacity:1\" />',\n                \"</linearGradient>\",\n                permanentMarker,\n                '<rect height=\"400\" width=\"400\" fill=\"url(#grad1)\" />',\n                logo,\n                wavesGraphic,\n                '<text font-size=\"15.5\" x=\"200\" y=\"163\" text-anchor=\"middle\" font-family=\"Sans,Arial\" letter-spacing=\"6\" fill=\"white\">',\n                \"DEPOSIT\",\n                \"</text>\",\n                '<text font-size=\"45\" x=\"200\" y=\"212\" text-anchor=\"middle\"  font-weight=\"910\" font-family=\"Sans,Arial\" letter-spacing=\"-1\" fill=\"white\">',\n                depositString,\n                \" ETH \",\n                \"</text>\",\n                '<text font-size=\"18.7\" x=\"200\" y=\"243\" text-anchor=\"middle\" font-family=\"Permanent Marker\" fill=\"white\">',\n                \"FRENS POOL STAKE\",\n                \"</text>\",\n                '<rect x=\"27\" y=\"345\" height=\"30\" width=\"346\" fill=\"#4554EA\" opacity=\".4\" />',\n                '<text font-size=\"10\" x=\"200\" y=\"365\" text-anchor=\"middle\" font-weight=\"bold\" font-family=\"Sans,Arial\" fill=\"white\">',\n                pool,\n                \"</text>\"\n            )\n        );\n\n        return render;\n    }\n}\n"
    },
    "contracts/interfaces/IFrensMetaHelper.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensMetaHelper {\n\n  //function getColor(address a) external pure returns(string memory);\n\n  function getEthDecimalString(uint amountInWei) external pure returns(string memory);\n\n  // function getOperatorsForPool(address poolAddress) external view returns (uint32[] memory, string memory);\n\n  function getPoolString(uint id) external view returns (string memory);\n\n  function getEns(address addr) external view returns(bool, string memory);\n\n  function getDepositStringForId(uint id) external view returns(string memory);\n}\n"
    },
    "contracts/interfaces/IPmFont.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\ninterface IPmFont {\n  function getPmFont() external view returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IFrensLogo.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensLogo {\n  function getLogo() external view returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IWaves.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\ninterface IWaves {\n  function getWaves() external view returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IFrensStorage.sol": {
      "content": "pragma solidity 0.8.20;\n\n\n// SPDX-License-Identifier: GPL-3.0-only\n//modified from IRocketStorage on 03/12/2022 by 0xWildhare\n\ninterface IFrensStorage {\n\n   \n    // Guardian\n    function getGuardian() external view returns(address);\n    function setGuardian(address _newAddress) external;\n    function confirmGuardian() external;\n    function burnKeys() external;\n\n    // Getters\n    function getAddress(bytes32 _key) external view returns (address);\n    function getUint(bytes32 _key) external view returns (uint);\n    function getBool(bytes32 _key) external view returns (bool);   \n\n    // Setters\n    function setAddress(bytes32 _key, address _value) external;\n    function setUint(bytes32 _key, uint _value) external;\n    function setBool(bytes32 _key, bool _value) external;    \n\n    // Deleters\n    function deleteAddress(bytes32 _key) external;\n    function deleteUint(bytes32 _key) external;\n    function deleteBool(bytes32 _key) external;    \n\n    // Arithmetic \n    function addUint(bytes32 _key, uint256 _amount) external;\n    function subUint(bytes32 _key, uint256 _amount) external;\n    \n}\n"
    },
    "contracts/StakingPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n///@title Frens Staking Pool Factory\n///@author 0xWildhare and Frens team\n///@dev allows user to create a new staking pool\n\nimport \"./StakingPool.sol\";\nimport \"./interfaces/IStakingPoolFactory.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\ncontract StakingPoolFactory is IStakingPoolFactory{\n    event Create(\n        address indexed contractAddress,\n        address creator,\n        address owner\n    );\n\n    IFrensPoolShare frensPoolShare;\n    IFrensStorage frensStorage;\n\n    constructor(IFrensStorage frensStorage_) {\n       frensStorage = frensStorage_;\n       frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\"))));\n    }\n\n    ///@dev creates a new pool\n    ///@return address of new pool\n    function create(\n        address _owner,\n        bool _validatorLocked\n    )\n        external\n        returns (\n            address\n        )\n    {\n        StakingPool stakingPool = new StakingPool(\n            _owner,\n            _validatorLocked,\n            frensStorage\n        );\n        // allow this stakingpool to mint shares in our NFT contract\n        IAccessControl(address(frensPoolShare)).grantRole(keccak256(\"MINTER_ROLE\"),address(stakingPool));\n        emit Create(address(stakingPool), msg.sender, address(this));\n        return (address(stakingPool));\n    }\n}\n"
    },
    "contracts/StakingPool.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\n///@title Frens Staking Pool Contract\n///@author 0xWildhare and the FRENS team\n///@dev A new instance of this contract is created everytime a user makes a new pool\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IDepositContract.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensOracle.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\n\ncontract StakingPool is IStakingPool, Ownable{\n    event Stake(address depositContractAddress, address caller);\n    event DepositToPool(uint amount, address depositer, uint id);\n    event AddToDeposit(uint id, uint ammount);\n    event SetPubKey(\n        bytes _pubKey,\n        bytes _withdrawal_credentials,\n        bytes _signature,\n        bytes32 _deposit_data_root\n    );\n    event Withdraw(uint id, uint amount, address recipient);\n    event Claim(uint id, uint amount, address recipient);\n\n\n    modifier noZeroValueTxn() {\n        require(msg.value > 0, \"must deposit ether\");\n        _;\n    }\n\n    modifier maxTotDep() {\n        require(\n            msg.value + totalDeposits <= 32 ether,\n            \"total deposits cannot be more than 32 Eth\"\n        );\n        _;\n    }\n\n    modifier mustBeAccepting() {\n        require(\n            currentState == PoolState.acceptingDeposits,\n            \"not accepting deposits\"\n        );\n        _;\n    }\n\n    modifier correctPoolOnly(uint _id) {\n        require(\n            frensPoolShare.poolByIds(_id) == address(this),\n            \"wrong staking pool for id\"\n        );\n        _;\n    }\n\n    enum PoolState {\n        awaitingValidatorInfo,\n        acceptingDeposits,\n        staked,\n        exited\n    }\n    PoolState public currentState;\n    \n    //this is unused in this version of the system\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\n    struct RageQuit {\n        uint price;\n        uint time;\n        bool rageQuitting;\n    }\n\n    //maps the ID for each FrensPoolShare NFT in the pool to the deposit for that share\n    mapping(uint => uint) public depositForId;\n    //maps each ID to the rewards it has already claimed (used in calculating the claimable rewards)\n    mapping(uint => uint) public frenPastClaim;\n    //this is unused in this version of the system\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\n    mapping(uint => bool) public locked; //transfer locked (must use ragequit)\n    //this is unused in this version of the system\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\n    mapping(uint => RageQuit) public rageQuitInfo;\n\n    //total eth deposited to pool by users (does not include attestation or block rewards)\n    uint public totalDeposits;\n    //total amount of rewards claimed from pool (used in calculating the claimable rewards)\n    uint public totalClaims;\n    //these are the ids which have deposits in this pool\n    uint[] public idsInPool;\n    //fee % for protocol (extracted when claiming rewards from un-exited pool)\n    uint public feePercent;\n\n    //this is set in the constructor and requires the validator public key and other validator info be set before deposits can be made\n    //also, if the validator is locked, once set, the pool owner cnnot change the validator pubkey and other info\n    bool public validatorLocked;\n    //this is unused in this version of the system\n    //it must be included to avoid requiring an update to FrensPoolShare when rageQuit is added\n    bool public transferLocked;\n    //set as true once the validator info has been set for the pool\n    bool public validatorSet;\n\n    //validator public key for pool\n    bytes public pubKey;\n    //validator withdrawal credentials - must be set to pool address\n    bytes public withdrawal_credentials;\n    //bls signature for validator\n    bytes public signature;\n    //deposit data root for validator\n    bytes32 public deposit_data_root;\n\n    //feeRecipient address will be the FRENS multisig until there is a dao\n    address public feeRecipient;\n\n    IFrensPoolShare public frensPoolShare;\n    IFrensArt public artForPool;\n    IFrensStorage public frensStorage;\n    IDepositContract public depositContract;\n\n    /**@dev when the pool is deploied by the factory, the owner, art contract, \n    *storage contract, and if the validator is locked are all set. \n    *The pool state is set according to whether or not the validator is locked.\n    */\n    constructor(\n        address owner_,\n        bool validatorLocked_,\n        IFrensStorage frensStorage_\n    ) {\n        require(owner_ != address(0), \"FRENS contract error no owner address set\");\n        require(address(frensStorage_) != address(0), \"FRENS contract error no storage address set\");\n        frensStorage = frensStorage_;\n        address artAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensArt\")));\n        require(artAddress != address(0), \"FRENS contract error no art address set\");\n        artForPool = IFrensArt(artAddress);\n        address frensPoolShareAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\")));\n        require(artAddress != address(0), \"FRENS contract error no pool share address set\");\n        frensPoolShare = IFrensPoolShare(frensPoolShareAddress);\n        address depositContractAddress = frensStorage.getAddress(keccak256(abi.encodePacked(\"external.contract.address\", \"DepositContract\")));\n        require(depositContractAddress != address(0), \"FRENS contract error no Deposit contract set\");\n        depositContract = IDepositContract(depositContractAddress);\n        feePercent = frensStorage.getUint(keccak256(abi.encodePacked(\"protocol.fee.percent\")));\n        require(feePercent <= 10, \"FRENS contract error fee too high\");\n        feeRecipient = frensStorage.getAddress(keccak256(abi.encodePacked(\"protocol.fee.recipient\")));\n        require(feeRecipient != address(0), \"FRENS contract error no fee recipient set\");\n        validatorLocked = validatorLocked_;\n        if (validatorLocked) {\n            currentState = PoolState.awaitingValidatorInfo;\n        } else {\n            currentState = PoolState.acceptingDeposits;\n        }\n        _transferOwnership(owner_);\n    }\n\n    ///@notice This allows a user to deposit funds to the pool, and recieve an NFT representing their share\n    ///@dev recieves funds and returns FrenspoolShare NFT\n    function depositToPool()\n        external\n        payable\n        noZeroValueTxn\n        mustBeAccepting\n        maxTotDep\n    {\n        uint id = frensPoolShare.totalSupply();\n        depositForId[id] = msg.value;\n        totalDeposits += msg.value;\n        idsInPool.push(id);\n        frenPastClaim[id] = 1; //this avoids future rounding errors in rewardclaims\n        locked[id] = transferLocked;\n        frensPoolShare.mint(msg.sender); //mint nft\n        emit DepositToPool(msg.value, msg.sender, id);\n    }\n\n    ///@notice allows a user to add funds to an existing NFT ID\n    ///@dev recieves funds and increases deposit for a FrensPoolShare ID\n    function addToDeposit(uint _id) external payable mustBeAccepting maxTotDep correctPoolOnly(_id){\n        require(frensPoolShare.exists(_id), \"id does not exist\"); //id must exist\n        depositForId[_id] += msg.value;\n        totalDeposits += msg.value;\n        emit AddToDeposit(_id, msg.value);\n    }\n\n    ///@dev stakes 32 ETH from this pool to the deposit contract, accepts validator info\n    function stake(\n        bytes calldata _pubKey,\n        bytes calldata _withdrawal_credentials,\n        bytes calldata _signature,\n        bytes32 _deposit_data_root\n    ) external onlyOwner {\n        //if validator info has previously been entered, check that it is the same, then stake\n        if (validatorSet) {\n            require(keccak256(_pubKey) == keccak256(pubKey), \"pubKey mismatch\");\n        } else {\n            //if validator info has not previously been entered, enter it, then stake\n            _setPubKey(\n                _pubKey,\n                _withdrawal_credentials,\n                _signature,\n                _deposit_data_root\n            );\n        }\n        _stake();\n    }\n\n    ///@dev stakes 32 ETH from this pool to the deposit contract. validator info must already be entered\n    function stake() external onlyOwner {\n        _stake();\n    }\n\n    function _stake() internal {\n        require(address(this).balance >= 32 ether, \"not enough eth\");\n        require(totalDeposits == 32 ether, \"not enough deposits\");\n        require(currentState == PoolState.acceptingDeposits, \"wrong state\");\n        require(validatorSet, \"validator not set\");\n        currentState = PoolState.staked;\n        depositContract.deposit{value: 32 ether}(\n            pubKey,\n            withdrawal_credentials,\n            signature,\n            deposit_data_root\n        );\n        emit Stake(address(depositContract), msg.sender);\n    }\n\n    ///@dev sets the validator info required when depositing to the deposit contract\n    function setPubKey(\n        bytes calldata _pubKey,\n        bytes calldata _withdrawal_credentials,\n        bytes calldata _signature,\n        bytes32 _deposit_data_root\n    ) external onlyOwner {\n        _setPubKey(\n            _pubKey,\n            _withdrawal_credentials,\n            _signature,\n            _deposit_data_root\n        );\n    }\n\n    function _setPubKey(\n        bytes calldata _pubKey,\n        bytes calldata _withdrawal_credentials,\n        bytes calldata _signature,\n        bytes32 _deposit_data_root\n    ) internal {\n        //get expected withdrawal_credentials based on contract address\n        bytes memory withdrawalCredFromAddr = _toWithdrawalCred(address(this));\n        //compare expected withdrawal_credentials to provided\n        require(\n            keccak256(_withdrawal_credentials) ==\n                keccak256(withdrawalCredFromAddr),\n            \"withdrawal credential mismatch\"\n        );\n        if (validatorLocked) {\n            require(currentState == PoolState.awaitingValidatorInfo, \"wrong state\");\n            assert(!validatorSet); //this should never fail\n            currentState = PoolState.acceptingDeposits;\n        }\n        require(currentState == PoolState.acceptingDeposits, \"wrong state\");\n        pubKey = _pubKey;\n        withdrawal_credentials = _withdrawal_credentials;\n        signature = _signature;\n        deposit_data_root = _deposit_data_root;\n        validatorSet = true;\n        emit SetPubKey(_pubKey, _withdrawal_credentials, _signature, _deposit_data_root);\n    }\n\n    ///@notice To withdraw funds previously deposited - ONLY works before the funds are staked. Use Claim to get rewards.\n    ///@dev allows user to withdraw funds if they have not yet been deposited to the deposit contract with the Stake method\n    function withdraw(uint _id, uint _amount) external mustBeAccepting {\n        require(msg.sender == frensPoolShare.ownerOf(_id), \"not the owner\");\n        require(depositForId[_id] >= _amount, \"not enough deposited\");\n        depositForId[_id] -= _amount;\n        totalDeposits -= _amount;\n        (bool success, /*return data*/) = frensPoolShare.ownerOf(_id).call{value: _amount}(\"\");\n        assert(success);\n        emit Withdraw(_id, _amount, msg.sender);\n    }\n\n    ///@notice allows user to claim their portion of the rewards\n    ///@dev calculates the rewards due to `_id` and sends them to the owner of `_id`\n    function claim(uint _id) external correctPoolOnly(_id){\n        require(\n            currentState != PoolState.acceptingDeposits,\n            \"use withdraw when not staked\"\n        );\n        require(\n            address(this).balance > 100,\n            \"must be greater than 100 wei to claim\"\n        );\n        //has the validator exited?\n        bool exited;\n        if (currentState != PoolState.exited) {\n            IFrensOracle frensOracle = IFrensOracle(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensOracle\"))));\n            exited = frensOracle.checkValidatorState(address(this));\n            if (exited && currentState == PoolState.staked ){\n                currentState = PoolState.exited;\n            }\n        } else exited = true;\n        //get share for id\n        uint amount = _getShare(_id);\n        //claim\n        frenPastClaim[_id] += amount;\n        totalClaims += amount;\n        //fee? not applied to exited\n        if (feePercent > 0 && !exited) {\n            uint feeAmount = (feePercent * amount) / 100;\n            if (feeAmount > 1){ \n                (bool success1, /*return data*/) = feeRecipient.call{value: feeAmount - 1}(\"\"); //-1 wei to avoid rounding error issues\n                assert(success1);\n            }\n            amount = amount - feeAmount;\n        }\n        address recipient = frensPoolShare.ownerOf(_id);\n        (bool success2, /*return data*/) = payable(recipient).call{value: amount}(\"\");\n        assert(success2);\n        emit Claim(_id, amount, recipient);\n    }\n\n    //getters\n\n    function getIdsInThisPool() external view returns(uint[] memory) {\n      return idsInPool;\n    }\n\n    ///@return the share of the validator rewards climable by `_id`\n    function getShare(uint _id) external view correctPoolOnly(_id) returns (uint) {\n        return _getShare(_id);\n    }\n\n    function _getShare(uint _id) internal view returns (uint) {\n        if (address(this).balance == 0) return 0;\n        uint frenDep = depositForId[_id];\n        uint frenPastClaims = frenPastClaim[_id];\n        uint totFrenRewards = ((frenDep * (address(this).balance + totalClaims)) / totalDeposits);\n        if (totFrenRewards == 0) return 0;\n        uint amount = totFrenRewards - frenPastClaims;\n        return amount;\n    }\n\n    ///@return the share of the validator rewards climable by `_id` minus fees. Returns 0 if pool is still accepting deposits\n    ///@dev this is used for the traits in the NFT\n    function getDistributableShare(uint _id) external view returns (uint) {\n        if (currentState == PoolState.acceptingDeposits) {\n            return 0;\n        } else {\n            uint share = _getShare(_id);\n            if (feePercent > 0 && currentState != PoolState.exited) {\n                uint feeAmount = (feePercent * share) / 100;\n                share = share - feeAmount;\n            }\n            return share;\n        }\n    }\n\n    ///@return pool state\n    function getState() external view returns (string memory) {\n        if (currentState == PoolState.awaitingValidatorInfo)\n            return \"awaiting validator info\";\n        if (currentState == PoolState.staked) return \"staked\";\n        if (currentState == PoolState.acceptingDeposits)\n            return \"accepting deposits\";\n        if (currentState == PoolState.exited) return \"exited\";\n        return \"state failure\"; //should never happen\n    }\n\n    function owner()\n        public\n        view\n        override(IStakingPool, Ownable)\n        returns (address)\n    {\n        return super.owner();\n    }\n\n    function _toWithdrawalCred(address a) private pure returns (bytes memory) {\n        bytes memory withdralDesired = abi.encodePacked(bytes1(0x01), bytes11(0x0), address(a));\n        return withdralDesired;\n    }\n\n    ///@dev allows pool owner to change the art for the NFTs in the pool\n    function setArt(IFrensArt newArtContract) external onlyOwner {\n        IFrensArt newFrensArt = newArtContract;\n        string memory newArt = newFrensArt.renderTokenById(1);\n        require(bytes(newArt).length != 0, \"invalid art contract\");\n        artForPool = newArtContract;\n    }\n\n    // to support receiving ETH by default\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/interfaces/IStakingPoolFactory.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\nimport \"./IFrensArt.sol\";\n\ninterface IStakingPoolFactory {\n\n  function create(\n    address _owner, \n    bool _validatorLocked \n    //bool frensLocked,\n    //uint poolMin,\n    //uint poolMax\n   ) external returns(address);\n\n}\n"
    },
    "contracts/interfaces/IFrensPoolShare.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/interfaces/IERC721Enumerable.sol\";\n\n\ninterface IFrensPoolShare is IERC721Enumerable{\n  \n  function poolByIds(uint _id) external view returns(address);\n\n  function mint(address userAddress) external;\n\n  function burn(uint tokenId) external;\n\n  function exists(uint _id) external view returns(bool);\n\n  function getPoolById(uint _id) external view returns(address);\n\n  function tokenURI(uint256 id) external view returns (string memory);\n\n  function renderTokenById(uint256 id) external view returns (string memory);\n\n}\n"
    },
    "contracts/interfaces/IFrensArt.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\ninterface IFrensArt {\n  function renderTokenById(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IDepositContract.sol": {
      "content": "\npragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\n\ninterface IDepositContract {\n\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    function get_deposit_count() external view returns (bytes memory);\n\n}\n"
    },
    "contracts/interfaces/IStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./IFrensArt.sol\";\n\ninterface IStakingPool {\n\n    function pubKey() external view returns(bytes memory);\n\n    function depositForId(uint _id) external view returns (uint);\n\n    function totalDeposits() external view returns(uint);\n\n    function transferLocked() external view returns(bool);\n\n    function locked(uint id) external view returns(bool);\n\n    function artForPool() external view returns (IFrensArt);\n\n    function owner() external view returns (address);\n\n    function depositToPool() external payable;\n\n    function addToDeposit(uint _id) external payable;\n\n    function withdraw(uint _id, uint _amount) external;\n\n    function claim(uint id) external;\n\n    function getIdsInThisPool() external view returns(uint[] memory);\n\n    function getShare(uint _id) external view returns (uint);\n\n    function getDistributableShare(uint _id) external view returns (uint);\n\n    function rageQuitInfo(uint id) external view returns(uint, uint, bool);\n\n    function setPubKey(\n        bytes calldata pubKey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external;\n\n    function getState() external view returns (string memory);\n\n    // function getDepositAmount(uint _id) external view returns(uint);\n\n    function stake(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external;\n\n    function stake() external;\n\n}\n"
    },
    "contracts/interfaces/IFrensOracle.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\n\ninterface IFrensOracle {\n\n   function checkValidatorState(address pool) external returns(bool);\n\n   function setExiting(bytes memory pubKey, bool isExiting) external;\n\n}"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/extensions/IERC721Enumerable.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/FrensPoolShareTokenURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n///@title Frens Pool Share Token URI\n///@author 0xWildhare and Frens team h/t scaffoldETH and budilGuidl\n///@dev returns the image and metadata for the NFT bytes64 encoded\n\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensPoolShareTokenURI.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"base64-sol/base64.sol\";\n\ncontract FrensPoolShareTokenURI is IFrensPoolShareTokenURI {\n    using Strings for uint256;\n\n    IFrensPoolShare frensPoolShare;\n    IFrensStorage frensStorage;\n\n    constructor(\n        IFrensStorage frensStorage_\n    ) {\n        frensStorage = frensStorage_;\n        frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\"))));\n    }\n\n    function tokenURI(uint256 id) external view returns(string memory) {\n        require(frensPoolShare.exists(id), \"id does not exist\");\n        IFrensMetaHelper frensMetaHelper = IFrensMetaHelper(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensMetaHelper\"))));\n        IStakingPool stakingPool = IStakingPool(frensPoolShare.getPoolById(id));\n        string memory poolState = stakingPool.getState();\n        string memory depositString = frensMetaHelper.getDepositStringForId(id);\n        uint shareForId = stakingPool.getDistributableShare(id);\n        string memory shareString = frensMetaHelper.getEthDecimalString(\n            shareForId\n        );\n        string memory stakingPoolAddress = Strings.toHexString(\n            uint160(address(stakingPool)),\n            20\n        );\n        string memory name = string(\n            abi.encodePacked(\"fren pool share #\", id.toString())\n        );\n        string memory description = string(\n            abi.encodePacked(\n                \"this fren has a deposit of \",\n                depositString,\n                \" Eth in pool \",\n                stakingPoolAddress,\n                \", with claimable balance of \",\n                shareString,\n                \" Eth\"\n            )\n        );\n\n        string memory creator = Strings.toHexString(\n            uint160(stakingPool.owner()),\n            20\n        );\n\n        string memory image = Base64.encode(\n            bytes(generateSVGofTokenById(id, stakingPool))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name,\n                                '\", \"description\":\"',\n                                description,\n                                '\", \"external_url\":\"https://app.frens.fun/pool/',\n                                stakingPoolAddress,\n                                '\", \"attributes\": [{\"trait_type\": \"pool\", \"value\":\"',\n                                stakingPoolAddress,\n                                //   '\"},{\"trait_type\": \"validator public key\", \"value\": \"',\n                                //   pubKeyString,\n                                '\"},{\"trait_type\": \"deposit\", \"value\": \"',\n                                depositString,\n                                \" Eth\",\n                                '\"},{\"trait_type\": \"claimable\", \"value\": \"',\n                                shareString,\n                                \" Eth\",\n                                '\"},{\"trait_type\": \"pool state\", \"value\": \"',\n                                poolState,\n                                '\"},{\"trait_type\": \"pool creator\", \"value\": \"',\n                                creator,\n                                '\"}], \"image\": \"',\n                                \"data:image/svg+xml;base64,\",\n                                image,\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateSVGofTokenById(\n        uint256 id,\n        IStakingPool pool\n    ) internal view returns (string memory) {\n        IFrensArt frensArt = pool.artForPool();\n        string memory svg = string(\n            abi.encodePacked(\n                '<svg width=\"400\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">',\n                frensArt.renderTokenById(id),\n                \"</svg>\"\n            )\n        );\n\n        return svg;\n    }\n}\n"
    },
    "contracts/interfaces/IFrensPoolShareTokenURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n\ninterface IFrensPoolShareTokenURI {\n  function tokenURI ( uint256 id ) external view returns ( string memory );\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    bytes  internal constant TABLE_DECODE = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\n                                            hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\n                                            hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\n                                            hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n\n        // load the table into memory\n        string memory table = TABLE_ENCODE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n\n        return result;\n    }\n\n    function decode(string memory _data) internal pure returns (bytes memory) {\n        bytes memory data = bytes(_data);\n\n        if (data.length == 0) return new bytes(0);\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\n\n        // load the table into memory\n        bytes memory table = TABLE_DECODE;\n\n        // every 4 characters represent 3 bytes\n        uint256 decodedLen = (data.length / 4) * 3;\n\n        // add some extra buffer at the end required for the writing\n        bytes memory result = new bytes(decodedLen + 32);\n\n        assembly {\n            // padding with '='\n            let lastBytes := mload(add(data, mload(data)))\n            if eq(and(lastBytes, 0xFF), 0x3d) {\n                decodedLen := sub(decodedLen, 1)\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\n                    decodedLen := sub(decodedLen, 1)\n                }\n            }\n\n            // set the actual output length\n            mstore(result, decodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 4 characters at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               // read 4 characters\n               dataPtr := add(dataPtr, 4)\n               let input := mload(dataPtr)\n\n               // write 3 bytes\n               let output := add(\n                   add(\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\n                   add(\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\n                    )\n                )\n                mstore(resultPtr, shl(232, output))\n                resultPtr := add(resultPtr, 3)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/FrensPoolShare.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n///@title Frens Pool Share NFT\n///@author 0xWildhare and FRENS team\n///@dev see ERC721\n\nimport \"./interfaces/IFrensPoolShareTokenURI.sol\";\nimport \"./interfaces/IFrensArt.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FrensPoolShare is\n    IFrensPoolShare,\n    ERC721Enumerable,\n    AccessControl,\n    Ownable\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    \n    IFrensStorage public frensStorage;\n\n    //maps each ID to the pool that minted it\n    mapping(uint => address) public poolByIds;\n\n    ///@dev sets the storage contract and the token name/symbol\n    constructor(IFrensStorage frensStorage_) ERC721(\"FRENS Share\", \"FRENS\") {\n        require(address(frensStorage_) != address(0), \"FRENS contract error no storage address set\");\n        frensStorage = frensStorage_;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n\n    }\n\n    ///@dev callable by the staking pools only\n    function mint(address userAddress) public {\n        require(\n            hasRole(MINTER_ROLE, msg.sender),\n            \"you are not allowed to mint\"\n        );\n        uint256 _id = totalSupply();\n        poolByIds[_id] = address(msg.sender);\n        _safeMint(userAddress, _id);\n    }\n\n    function exists(uint _id) public view returns (bool) {\n        return _exists(_id);\n    }\n\n    function getPoolById(uint _id) public view returns (address) {\n        return (poolByIds[_id]);\n    }\n\n    ///@dev stakingPool is allowed during rageQuit, so the user cannot block the sale of the NFT by changing the allow\n    function getApproved(uint256 tokenId) public view virtual override(ERC721, IERC721) returns (address) {\n        _requireMinted(tokenId);\n        address poolAddr = poolByIds[tokenId];\n        IStakingPool stakingPool = IStakingPool(poolAddr);\n        (/*price*/,/*time*/, bool quitting) = stakingPool.rageQuitInfo(tokenId);\n        if(quitting) {\n            return poolAddr;\n        } else{\n            return super.getApproved(tokenId);\n        }\n        \n    }\n\n    function tokenURI(\n        uint256 id\n    ) public view override(ERC721, IFrensPoolShare) returns (string memory) {\n        IFrensPoolShareTokenURI frensPoolShareTokenURI = IFrensPoolShareTokenURI(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShareTokenURI\"))));\n        return frensPoolShareTokenURI.tokenURI(id);\n    }\n\n    function renderTokenById(uint256 id) public view returns (string memory) {\n        IStakingPool pool = IStakingPool(getPoolById(id));\n        IFrensArt frensArt = pool.artForPool();\n        return frensArt.renderTokenById(id);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint tokenId,\n        uint batchSize\n    ) internal override {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n        IStakingPool pool = IStakingPool(poolByIds[tokenId]);\n        if (from != address(0) && to != address(0)) {\n            require(pool.locked(tokenId) == false, \"not transferable\");\n        }\n    }\n\n    function burn(uint tokenId) public {\n        require(\n            msg.sender == address(poolByIds[tokenId]),\n            \"cannot burn shares from other pools\"\n        );\n        _burn(tokenId);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC721Enumerable, AccessControl, IERC165)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/FrensOracle.sol": {
      "content": "pragma solidity 0.8.20;\n//SPDX-License-Identifier: MIT\n\n///@title Frens Merkle Prover\n///@author 0xWildhare and the Frens team\n///@dev this gives the Frens Multisig a way to mark a pool as exiting (and then no longer charge fees) This should be replaced by a decentralized alternative\n\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensOracle.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\n\ncontract FrensOracle is IFrensOracle {\n\n    //sets a validator public key (which is associated with a pool) as exiting\n    mapping(bytes => bool) public isExiting;\n\n    IFrensStorage frensStorage;\n\n    constructor(IFrensStorage frensStorage_) {\n        frensStorage = frensStorage_;\n    }\n\n    ///@dev called by the staking pool to check if the validator is exiting\n    function checkValidatorState(address poolAddress) external view returns(bool) {\n        IStakingPool pool = IStakingPool(poolAddress);\n        bytes memory pubKey = pool.pubKey();\n        return isExiting[pubKey];\n    }\n\n    ///@dev allows multisig (guardian) to set a pool as exiting. \n   function setExiting(bytes memory pubKey, bool _isExiting) external {\n        require(msg.sender == frensStorage.getGuardian(), \"must be guardian\");\n        isExiting[pubKey] = _isExiting;\n   }\n    \n}"
    },
    "contracts/FrensMetaHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n///@title Frens Meta Helper\n///@author 0xWildhare and Frens Team\n///@dev support functions for FrensArt and FrensPoolShareTokenURI\n\nimport \"./interfaces/IFrensMetaHelper.sol\";\nimport \"./interfaces/IFrensPoolShare.sol\";\nimport \"./interfaces/IENS.sol\";\nimport \"./interfaces/IReverseResolver.sol\";\nimport \"./interfaces/IStakingPool.sol\";\nimport \"./interfaces/IFrensStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract FrensMetaHelper is IFrensMetaHelper {\n    using Strings for uint256;\n    IFrensPoolShare frensPoolShare;\n    IFrensStorage frensStorage;\n\n    constructor(IFrensStorage frensStorage_) {\n        frensStorage = frensStorage_;\n        frensPoolShare = IFrensPoolShare(frensStorage.getAddress(keccak256(abi.encodePacked(\"contract.address\", \"FrensPoolShare\"))));\n    }\n\n    ///@return the deposit for an NFT ID in string format\n    function getDepositStringForId(\n        uint id\n    ) external view returns (string memory) {\n        IStakingPool stakingPool = IStakingPool(frensPoolShare.getPoolById(id));\n        return getEthDecimalString(stakingPool.depositForId(id));\n    }\n\n    ///@return an amount in wei formated as Eth with 3 decimal places, as a string\n    function getEthDecimalString(\n        uint amountInWei\n    ) public pure returns (string memory) {\n        string memory leftOfDecimal = (amountInWei / 1 ether).toString();\n        uint rightOfDecimal = (amountInWei % 1 ether) / 10 ** 15;\n        string memory rod = rightOfDecimal.toString();\n        //if(rightOfDecimal < 1000) rod = string.concat(\"0\", rod);\n        if (rightOfDecimal < 100) rod = string.concat(\"0\", rod);\n        if (rightOfDecimal < 10) rod = string.concat(\"0\", rod);\n        return string.concat(leftOfDecimal, \".\", rod);\n    }\n\n    ///@return string version of pool address for an NFT ID\n    function getPoolString(uint id) external view returns (string memory) {\n        IStakingPool stakingPool = IStakingPool(frensPoolShare.getPoolById(id));\n        return Strings.toHexString(uint160(address(stakingPool)), 20);\n    }\n\n    function _iToHex(\n        bytes memory buffer\n    ) internal pure returns (string memory) {\n        // Fixed buffer size for hexadecimal convertion\n        bytes memory converted = new bytes(buffer.length * 2);\n        bytes memory _base = \"0123456789abcdef\";\n        for (uint256 i = 0; i < buffer.length; i++) {\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n        }\n        return string(abi.encodePacked(\"0x\", converted));\n    }\n\n    ///@return does the address have an ENS set?\n    ///@return string of the ENS for the address\n    function getEns(address addr) external view returns (bool, string memory) {\n        IENS ens = IENS(address(frensStorage.getAddress(keccak256(abi.encodePacked(\"external.contract.address\", \"ENS\")))));\n        bytes32 node = _node(addr);\n        address revResAddr = ens.resolver(node);\n        if (revResAddr == address(0)) return (false, \"\");\n        IReverseResolver reverseResolver = IReverseResolver(revResAddr);\n        return (ens.recordExists(node), reverseResolver.name(node));\n    }\n\n    function _node(address addr) internal pure returns (bytes32) {\n        bytes32 ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n        return\n            keccak256(\n                abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr))\n            );\n    }\n\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\n        addr;\n        ret; // Stop warning us about unused variables\n        assembly {\n            let\n                lookup\n            := 0x3031323334353637383961626364656600000000000000000000000000000000\n            for {\n                let i := 40\n            } gt(i, 0) {\n\n            } {\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n                i := sub(i, 1)\n                mstore8(i, byte(and(addr, 0xf), lookup))\n                addr := div(addr, 0x10)\n            }\n            ret := keccak256(0, 40)\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IENS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IENS {\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address owner);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolver);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttl);\n\n    // Logged when an operator is added or removed.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\n    function setResolver(bytes32 node, address resolver) external;\n    function setOwner(bytes32 node, address owner) external;\n    function setTTL(bytes32 node, uint64 ttl) external;\n    function setApprovalForAll(address operator, bool approved) external;\n    function owner(bytes32 node) external view returns (address);\n    function resolver(bytes32 node) external view returns (address);\n    function ttl(bytes32 node) external view returns (uint64);\n    function recordExists(bytes32 node) external view returns (bool);\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}"
    },
    "contracts/interfaces/IReverseResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IReverseResolver{\n\n    function name(bytes32 node) external view returns(string memory);\n\n}"
    },
    "contracts/FrensStorage.sol": {
      "content": "pragma solidity 0.8.20;\n\n// SPDX-License-Identifier: GPL-3.0-only\n\n/// @title The primary persistent storage for Frens Staking Pools\n/// @author modified 04-Dec-2022 by 0xWildhare originally by David Rugendyke (h/t David and Rocket Pool!)\n/// @dev this code is modified from the Rocket Pool RocketStorage contract all \"Rocket\" replaced with \"Frens\" - everything not used by frens has beed removed.\n\nimport \"./interfaces/IFrensStorage.sol\";\n\ncontract FrensStorage is IFrensStorage{\n\n    // Events\n    event GuardianChanged(address oldGuardian, address newGuardian);\n\n     // Storage maps\n    \n    mapping(bytes32 => uint256)    private uintStorage;\n    mapping(bytes32 => address)    private addressStorage;\n    mapping(bytes32 => bool)       private booleanStorage;\n    \n    \n    // Guardian address\n    address guardian;\n    address newGuardian;\n\n    /**\n    * @dev Throws if called by any account other than a guardian account (temporary account allowed access to settings before DAO is fully enabled)\n    */\n    modifier onlyGuardian() {\n        require(msg.sender == guardian, \"Account is not a guardian\");\n        _;\n    }\n\n\n    /// @dev Construct FrensStorage\n    constructor() {\n        // Set the guardian upon deployment\n        guardian = msg.sender;\n    }\n\n    // Get guardian address\n    function getGuardian() external override view returns (address) {\n        return guardian;\n    }\n\n    // Transfers guardianship to a new address\n    function setGuardian(address _newAddress) external override onlyGuardian{\n        // Store new address awaiting confirmation\n        newGuardian = _newAddress;\n    }\n\n    // Confirms change of guardian\n    function confirmGuardian() external override {\n        // Check tx came from new guardian address\n        require(msg.sender == newGuardian, \"Confirmation must come from new guardian address\");\n        // Store old guardian for event\n        address oldGuardian = guardian;\n        // Update guardian and clear storage\n        guardian = newGuardian;\n        delete newGuardian;\n        // Emit event\n        emit GuardianChanged(oldGuardian, guardian);\n    }\n\n        // Confirms burning guardianship\n    function burnKeys() external override onlyGuardian{\n        // Check that new guardian has been set to zero address (are you sure?)\n        require(address(0) == newGuardian, \"must set guardian to 0x00 first\");\n        // Store old guardian for event\n        address oldGuardian = guardian;\n        // delete guardian \n        delete guardian;\n        // Emit event\n        emit GuardianChanged(oldGuardian, guardian);\n    }\n\n\n    /// @param _key The key for the record\n    function getAddress(bytes32 _key) override external view returns (address r) {\n        return addressStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getUint(bytes32 _key) override external view returns (uint256 r) {\n        return uintStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function getBool(bytes32 _key) override external view returns (bool r) {\n        return booleanStorage[_key];\n    }\n\n\n    /// @param _key The key for the record\n    function setAddress(bytes32 _key, address _value) onlyGuardian override external {\n        addressStorage[_key] = _value;\n    }\n/*\n    /// @param _key The key for the record\n    function setAddress(string memory _key, address _value) external {\n        bytes32 key = keccak256(abi.encodePacked(_key, msg.sender));\n        addressStorage[key] = _value;\n    }\n*/\n    /// @param _key The key for the record\n    function setUint(bytes32 _key, uint _value) onlyGuardian override external {\n        uintStorage[_key] = _value;\n    }\n\n   \n    /// @param _key The key for the record\n    function setBool(bytes32 _key, bool _value) onlyGuardian override external {\n        booleanStorage[_key] = _value;\n    }\n\n\n\n    /// @param _key The key for the record\n    function deleteAddress(bytes32 _key) onlyGuardian override external {\n        delete addressStorage[_key];\n    }\n\n    /// @param _key The key for the record - added for Frens ~ 0xWildhare\n    function deleteUint(bytes32 _key) onlyGuardian override external {\n        delete uintStorage[_key];\n    }\n\n    /// @param _key The key for the record\n    function deleteBool(bytes32 _key) onlyGuardian override external {\n        delete booleanStorage[_key];\n    }\n\n   \n\n    /// @param _key The key for the record\n    /// @param _amount An amount to add to the record's value  - 0xWildhare removed safeMath\n    function addUint(bytes32 _key, uint256 _amount) onlyGuardian override external {\n        uintStorage[_key] += _amount;\n    }\n\n    /// @param _key The key for the record\n    /// @param _amount An amount to subtract from the record's value - 0xWildhare removed safeMath\n    function subUint(bytes32 _key, uint256 _amount) onlyGuardian override external {\n        uintStorage[_key] -= _amount;\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}